{
	"info": {
		"_postman_id": "b3270121-69ca-422c-a273-17edf98135fd",
		"name": "UserOrg_APIs",
		"description": "The User ORG API is a collection of API's for creation and management of User and Org in sunbird platform.",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "4875988",
		"_collection_link": "https://dark-star-147860.postman.co/workspace/LernBBAPIs~32e17cc4-6806-407e-b8ef-485ad4d0b712/collection/4875988-b3270121-69ca-422c-a273-17edf98135fd?action=share&source=collection_link&creator=4875988"
	},
	"item": [
		{
			"name": "HealthCheck",
			"item": [
				{
					"name": "HealthCheck",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonResponse = pm.response.json();",
									"",
									"// Verification",
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type header is present\", () => {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});",
									"",
									"pm.test(\"Test data type of the response and keys\", () => {",
									"    pm.expect(jsonResponse).to.be.an(\"object\").that.has.all.keys(",
									"        'id', 'ver', 'ts', 'params', 'responseCode', 'result'",
									"    );",
									"",
									"    pm.expect(jsonResponse.id).to.be.a(\"string\");",
									"    pm.expect(jsonResponse.ver).to.be.a(\"string\");",
									"    pm.expect(jsonResponse.ts).to.be.a(\"string\");",
									"    pm.expect(jsonResponse.responseCode).to.be.a(\"string\");",
									"",
									"    pm.expect(jsonResponse.params).to.be.an(\"object\").that.has.all.keys(",
									"        'resmsgid', 'msgid', 'status', 'err', 'errmsg'",
									"    );",
									"",
									"    pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");",
									"    pm.expect(jsonResponse.params.msgid).to.be.a(\"string\");",
									"    pm.expect(jsonResponse.params.status).to.be.a(\"string\");",
									"    pm.expect(jsonResponse.params.err).to.be.null;",
									"    pm.expect(jsonResponse.params.errmsg).to.be.null;",
									"",
									"    pm.expect(jsonResponse.result).to.be.an(\"object\").that.has.all.keys(",
									"        'name', 'version', 'healthy', 'check'",
									"    );",
									"",
									"    pm.expect(jsonResponse.result.name).to.be.a(\"string\");",
									"    pm.expect(jsonResponse.result.version).to.be.a(\"string\");",
									"    pm.expect(jsonResponse.result.healthy).to.be.a(\"boolean\");",
									"    pm.expect(jsonResponse.result.check).to.be.an(\"array\");",
									"});",
									"",
									"// Validation",
									"pm.test(\"id should be portal.Health.API\", function () {",
									"    pm.expect(jsonResponse.id).to.eql(\"portal.Health.API\");",
									"});",
									"",
									"pm.test(\"ver should be 1.0\", function () {",
									"    pm.expect(jsonResponse.ver).to.eql(\"1.0\");",
									"});",
									"",
									"pm.test(\"responseCode should be OK\", function () {",
									"    pm.expect(jsonResponse.responseCode).to.eql(\"OK\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{host}}/health"
					},
					"response": [
						{
							"name": "HealthCheck",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": "{{host}}/health"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 09 Aug 2023 10:50:09 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "ETag",
									"value": "W/\"238-OxhKjUO4k6XX0x1zBzEClai2NUU\""
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": \"portal.Health.API\",\n    \"ver\": \"1.0\",\n    \"ts\": \"2023-08-09T10:50:09.985Z\",\n    \"params\": {\n        \"resmsgid\": \"82aa1310-36a2-11ee-9ee4-71580f83d754\",\n        \"msgid\": \"82a61b70-36a2-11ee-9ee4-71580f83d754\",\n        \"status\": \"successful\",\n        \"err\": null,\n        \"errmsg\": null\n    },\n    \"responseCode\": \"OK\",\n    \"result\": {\n        \"name\": \"PortalHealthCheckService\",\n        \"version\": \"1.0\",\n        \"healthy\": false,\n        \"check\": [\n            {\n                \"name\": \"contentservice.api\",\n                \"err\": \"CONTENT_SERVICE_HEALTH_FAILED\",\n                \"errmsg\": \"content service is not healthy\"\n            },\n            {\n                \"name\": \"learnerservice.api\",\n                \"healthy\": true,\n                \"err\": \"\",\n                \"errmsg\": \"\"\n            },\n            {\n                \"name\": \"cassandra.db\",\n                \"healthy\": true,\n                \"err\": \"\",\n                \"errmsg\": \"\"\n            }\n        ]\n    }\n}"
						}
					]
				}
			]
		},
		{
			"name": "UserAPIs",
			"item": [
				{
					"name": "CreateUser",
					"item": [
						{
							"name": "CreateUserV1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Parse the request JSON body",
											"const requestBody = JSON.parse(pm.request.body.raw);",
											"const email = requestBody.request.email;",
											"const password = requestBody.request.password;",
											"",
											"// Set the user name and password as environment variables",
											"pm.environment.set('username', email);",
											"pm.environment.set('password', password);",
											"",
											"// Extract the user_id from the response and set it to the environment variable",
											"pm.test(\"Set user_id in environment variable\", function () {",
											"    const responseJson = pm.response.json();",
											"    pm.environment.set(\"user_id\", responseJson.result.userId);",
											"});",
											"",
											"// Parse the response JSON body",
											"let jsonResponse = pm.response.json();",
											"",
											"// Verification",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type header is present\", () => {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Content-Type header is application/json\", () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"});",
											"",
											"pm.test(\"Test data type of the response and keys\", () => {",
											"    pm.expect(jsonResponse).to.be.an(\"object\").that.has.all.keys(",
											"        'id', 'ver', 'ts', 'params', 'responseCode', 'result'",
											"    );",
											"",
											"    pm.expect(jsonResponse.id).to.be.a(\"string\");",
											"    pm.expect(jsonResponse.ver).to.be.a(\"string\");",
											"    pm.expect(jsonResponse.ts).to.be.a(\"string\");",
											"    pm.expect(jsonResponse.responseCode).to.be.a(\"string\");",
											"",
											"    pm.expect(jsonResponse.params).to.be.an(\"object\").that.has.all.keys(",
											"        'resmsgid', 'msgid', 'err', 'status', 'errmsg'",
											"    );",
											"",
											"    pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");",
											"    pm.expect(jsonResponse.params.msgid).to.be.a(\"string\");",
											"    pm.expect(jsonResponse.params.err).to.be.null;",
											"    pm.expect(jsonResponse.params.status).to.be.a(\"string\");",
											"    pm.expect(jsonResponse.params.errmsg).to.be.null;",
											"",
											"    pm.expect(jsonResponse.result).to.be.an(\"object\").that.has.all.keys(",
											"        'userId', 'response', 'errors'",
											"    );",
											"",
											"    pm.expect(jsonResponse.result.userId).to.be.a(\"string\");",
											"    pm.expect(jsonResponse.result.response).to.be.a(\"string\");",
											"    pm.expect(jsonResponse.result.errors).to.be.a(\"array\");",
											"});",
											"",
											"// Validation",
											"pm.test(\"id should be api.user.create\", function () {",
											"    pm.expect(jsonResponse.id).to.eql(\"api.user.create\");",
											"});",
											"",
											"pm.test(\"ver should be v1\", function () {",
											"    pm.expect(jsonResponse.ver).to.eql(\"v1\");",
											"});",
											"",
											"pm.test(\"params.status should be SUCCESS\", function () {",
											"    pm.expect(jsonResponse.params.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(\"responseCode should be OK\", function () {",
											"    pm.expect(jsonResponse.responseCode).to.eql(\"OK\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"firstName\": \"{{random_first_name}}\",\n        \"lastName\": \"{{random_last_name}}\",\n        \"userName\": \"{{random_user_name}}\",\n        \"email\": \"{{random_email}}\",\n        \"emailVerified\": true,\n        \"password\": \"{{random_password}}\",\n        \"userType\": \"teacher\"\n    }\n}"
								},
								"url": "{{host}}/api/user/v1/create"
							},
							"response": []
						},
						{
							"name": "CreateUserV2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonResponse = pm.response.json()",
											"",
											"//Verification",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200)",
											"});",
											"pm.test(\"Content-Type header is present\", () => {",
											"  pm.response.to.have.header(\"Content-Type\");",
											"});",
											"pm.test(\"Content-Type header is application/json\", () => {",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"});",
											"",
											"pm.test(\"Test data type of the response and keys\", () => {",
											"  pm.expect(jsonResponse).to.be.an(\"object\").that.has.all.keys('id', 'ver', 'ts', 'params', 'responseCode', 'result');",
											"  pm.expect(jsonResponse.id).to.be.a(\"string\");",
											"  pm.expect(jsonResponse.ver).to.be.a(\"string\");",
											"  pm.expect(jsonResponse.ts).to.be.a(\"string\");",
											"  pm.expect(jsonResponse.responseCode).to.be.a(\"string\");",
											"  pm.expect(jsonResponse.params).to.be.an(\"object\").that.has.all.keys('resmsgid', 'msgid', 'err', 'status', 'errmsg');",
											"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");",
											"  pm.expect(jsonResponse.params.msgid).to.be.a(\"string\");",
											"  pm.expect(jsonResponse.params.err).to.be.null;",
											"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");",
											"  pm.expect(jsonResponse.params.errmsg).to.be.null;",
											"  pm.expect(jsonResponse.result).to.be.an(\"object\");",
											"  pm.expect(jsonResponse.result).to.have.all.keys('userId', 'response', 'errors');",
											"  pm.expect(jsonResponse.result.userId).to.be.a(\"string\");",
											"  pm.expect(jsonResponse.result.response).to.be.a(\"string\");",
											"  pm.expect(jsonResponse.result.errors).to.be.a(\"array\");",
											"});",
											"",
											"//Validation",
											"pm.test(\"id should be api.user.create\", function () {",
											"   pm.expect(jsonResponse.id).to.eql(\"api.user.create\");",
											"});",
											"pm.test(\"ver should be v2\", function () {",
											"   pm.expect(jsonResponse.ver).to.eql(\"v2\");",
											"});",
											"pm.test(\"params.status should be SUCCESS\", function () {",
											"    pm.expect(jsonResponse.params.status).to.eql(\"SUCCESS\");",
											"});",
											"pm.test(\"responseCode should be OK\", function () {",
											"    pm.expect(jsonResponse.responseCode).to.eql(\"OK\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"firstName\": \"{{random_first_name}}\",\n        \"password\": \"{{random_password}}\",\n        \"email\": \"{{random_email}}\",\n        \"lastName\": \"{{random_last_name}}\",\n        \"emailVerified\": true\n    }\n}"
								},
								"url": "{{host}}/api/user/v2/create"
							},
							"response": []
						},
						{
							"name": "CreateUserV3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonResponse = pm.response.json()",
											"",
											"//Verification",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200)",
											"});",
											"pm.test(\"Content-Type header is present\", () => {",
											"  pm.response.to.have.header(\"Content-Type\");",
											"});",
											"pm.test(\"Content-Type header is application/json\", () => {",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"});",
											"",
											"pm.test(\"Test data type of the response and keys\", () => {",
											"  pm.expect(jsonResponse).to.be.an(\"object\").that.has.all.keys('id', 'ver', 'ts', 'params', 'responseCode', 'result');",
											"  pm.expect(jsonResponse.id).to.be.a(\"string\");",
											"  pm.expect(jsonResponse.ver).to.be.a(\"string\");",
											"  pm.expect(jsonResponse.ts).to.be.a(\"string\");",
											"  pm.expect(jsonResponse.responseCode).to.be.a(\"string\");",
											"  pm.expect(jsonResponse.params).to.be.an(\"object\").that.has.all.keys('resmsgid', 'msgid', 'err', 'status', 'errmsg');",
											"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");",
											"  pm.expect(jsonResponse.params.msgid).to.be.a(\"string\");",
											"  pm.expect(jsonResponse.params.err).to.be.null;",
											"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");",
											"  pm.expect(jsonResponse.params.errmsg).to.be.null;",
											"  pm.expect(jsonResponse.result).to.be.an(\"object\");",
											"  pm.expect(jsonResponse.result).to.have.all.keys('userId', 'response', 'errors');",
											"  pm.expect(jsonResponse.result.userId).to.be.a(\"string\");",
											"  pm.expect(jsonResponse.result.response).to.be.a(\"string\");",
											"  pm.expect(jsonResponse.result.errors).to.be.a(\"array\");",
											"});",
											"",
											"//Validation",
											"pm.test(\"id should be api.user.create\", function () {",
											"   pm.expect(jsonResponse.id).to.eql(\"api.user.create\");",
											"});",
											"pm.test(\"ver should be v3\", function () {",
											"   pm.expect(jsonResponse.ver).to.eql(\"v3\");",
											"});",
											"pm.test(\"params.status should be SUCCESS\", function () {",
											"    pm.expect(jsonResponse.params.status).to.eql(\"SUCCESS\");",
											"});",
											"pm.test(\"responseCode should be OK\", function () {",
											"    pm.expect(jsonResponse.responseCode).to.eql(\"OK\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}"
									},
									{
										"key": "X-Authenticated-User-token",
										"value": "{{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"firstName\": \"{{random_first_name}}\",\n        \"password\": \"{{random_password}}\",\n        \"email\": \"{{random_email}}\",\n        \"lastName\": \"{{random_last_name}}\",\n        \"userName\": \"{{random_user_name}}\",\n        \"emailVerified\": true\n    }\n}"
								},
								"url": "{{host}}/api/user/v3/create"
							},
							"response": []
						},
						{
							"name": "CreateUserV4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonResponse = pm.response.json()",
											"",
											"//Verification",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200)",
											"});",
											"pm.test(\"Content-Type header is present\", () => {",
											"  pm.response.to.have.header(\"Content-Type\");",
											"});",
											"pm.test(\"Content-Type header is application/json\", () => {",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"});",
											"",
											"pm.test(\"Test data type of the response and keys\", () => {",
											"  pm.expect(jsonResponse).to.be.an(\"object\").that.has.all.keys('id', 'ver', 'ts', 'params', 'responseCode', 'result');",
											"  pm.expect(jsonResponse.id).to.be.a(\"string\");",
											"  pm.expect(jsonResponse.ver).to.be.a(\"string\");",
											"  pm.expect(jsonResponse.ts).to.be.a(\"string\");",
											"  pm.expect(jsonResponse.responseCode).to.be.a(\"string\");",
											"  pm.expect(jsonResponse.params).to.be.an(\"object\").that.has.all.keys('resmsgid', 'msgid', 'err', 'status', 'errmsg');",
											"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");",
											"  pm.expect(jsonResponse.params.msgid).to.be.a(\"string\");",
											"  pm.expect(jsonResponse.params.err).to.be.null;",
											"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");",
											"  pm.expect(jsonResponse.params.errmsg).to.be.null;",
											"  pm.expect(jsonResponse.result).to.be.an(\"object\");",
											"  pm.expect(jsonResponse.result).to.have.all.keys('userId', 'response');",
											"  pm.expect(jsonResponse.result.userId).to.be.a(\"string\");",
											"  pm.expect(jsonResponse.result.response).to.be.a(\"string\");",
											"});",
											"",
											"//Validation",
											"pm.test(\"id should be api.user.create\", function () {",
											"   pm.expect(jsonResponse.id).to.eql(\"api.user.create\");",
											"});",
											"pm.test(\"ver should be v4\", function () {",
											"   pm.expect(jsonResponse.ver).to.eql(\"v4\");",
											"});",
											"pm.test(\"params.status should be SUCCESS\", function () {",
											"    pm.expect(jsonResponse.params.status).to.eql(\"SUCCESS\");",
											"});",
											"pm.test(\"responseCode should be OK\", function () {",
											"    pm.expect(jsonResponse.responseCode).to.eql(\"OK\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}"
									},
									{
										"key": "x-authenticated-user-token",
										"value": "{{keycloak_access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"firstName\": \"{{random_first_name}}\",\n        \"managedBy\": \"{{user_id}}\"\n    }\n}"
								},
								"url": "{{host}}/api/user/v4/create"
							},
							"response": []
						},
						{
							"name": "CreateManagedUserV1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonResponse = pm.response.json()",
											"",
											"//Verification",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200)",
											"});",
											"pm.test(\"Content-Type header is present\", () => {",
											"  pm.response.to.have.header(\"Content-Type\");",
											"});",
											"pm.test(\"Content-Type header is application/json\", () => {",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"});",
											"",
											"pm.test(\"Test data type of the response and keys\", () => {",
											"  pm.expect(jsonResponse).to.be.an(\"object\").that.has.all.keys('id', 'ver', 'ts', 'params', 'responseCode', 'result');",
											"  pm.expect(jsonResponse.id).to.be.a(\"string\");",
											"  pm.expect(jsonResponse.ver).to.be.a(\"string\");",
											"  pm.expect(jsonResponse.ts).to.be.a(\"string\");",
											"  pm.expect(jsonResponse.responseCode).to.be.a(\"string\");",
											"  pm.expect(jsonResponse.params).to.be.an(\"object\").that.has.all.keys('resmsgid', 'msgid', 'err', 'status', 'errmsg');",
											"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");",
											"  pm.expect(jsonResponse.params.msgid).to.be.a(\"string\");",
											"  pm.expect(jsonResponse.params.err).to.be.null;",
											"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");",
											"  pm.expect(jsonResponse.params.errmsg).to.be.null;",
											"  pm.expect(jsonResponse.result).to.be.an(\"object\");",
											"  pm.expect(jsonResponse.result).to.have.all.keys('userId', 'response');",
											"  pm.expect(jsonResponse.result.userId).to.be.a(\"string\");",
											"  pm.expect(jsonResponse.result.response).to.be.a(\"string\");",
											"});",
											"",
											"//Validation",
											"pm.test(\"id should be api.user.create\", function () {",
											"   pm.expect(jsonResponse.id).to.eql(\"api.manageduser.create\");",
											"});",
											"pm.test(\"ver should be v1\", function () {",
											"   pm.expect(jsonResponse.ver).to.eql(\"v1\");",
											"});",
											"pm.test(\"params.status should be SUCCESS\", function () {",
											"    pm.expect(jsonResponse.params.status).to.eql(\"SUCCESS\");",
											"});",
											"pm.test(\"responseCode should be OK\", function () {",
											"    pm.expect(jsonResponse.responseCode).to.eql(\"OK\");",
											"});",
											"",
											"pm.test(\"Set user_id in environment variable\", function () {",
											"    const responseJson = pm.response.json();",
											"    pm.environment.set(\"managed_user_id\", responseJson.result.userId);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}"
									},
									{
										"key": "x-authenticated-user-token",
										"value": "{{keycloak_access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"firstName\": \"{{random_first_name}}\",\n        \"userName\": \"{{random_user_name}}\",\n        \"managedBy\": \"{{user_id}}\"\n    }\n}"
								},
								"url": "{{host}}/api/user/v1/managed/create"
							},
							"response": []
						},
						{
							"name": "CreateSSOUserV1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonResponse = pm.response.json()",
											"",
											"//Verification",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200)",
											"});",
											"pm.test(\"Content-Type header is present\", () => {",
											"  pm.response.to.have.header(\"Content-Type\");",
											"});",
											"pm.test(\"Content-Type header is application/json\", () => {",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"});",
											"",
											"pm.test(\"Test data type of the response and keys\", () => {",
											"  pm.expect(jsonResponse).to.be.an(\"object\").that.has.all.keys('id', 'ver', 'ts', 'params', 'responseCode', 'result');",
											"  pm.expect(jsonResponse.id).to.be.a(\"string\");",
											"  pm.expect(jsonResponse.ver).to.be.a(\"string\");",
											"  pm.expect(jsonResponse.ts).to.be.a(\"string\");",
											"  pm.expect(jsonResponse.responseCode).to.be.a(\"string\");",
											"  pm.expect(jsonResponse.params).to.be.an(\"object\").that.has.all.keys('resmsgid', 'msgid', 'err', 'status', 'errmsg');",
											"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");",
											"  pm.expect(jsonResponse.params.msgid).to.be.a(\"string\");",
											"  pm.expect(jsonResponse.params.err).to.be.null;",
											"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");",
											"  pm.expect(jsonResponse.params.errmsg).to.be.null;",
											"  pm.expect(jsonResponse.result).to.be.an(\"object\");",
											"  pm.expect(jsonResponse.result).to.have.all.keys('userId', 'response','errors');",
											"  pm.expect(jsonResponse.result.userId).to.be.a(\"string\");",
											"  pm.expect(jsonResponse.result.response).to.be.a(\"string\");",
											"  pm.expect(jsonResponse.result.errors).to.be.a(\"array\");",
											"});",
											"",
											"//Validation",
											"pm.test(\"id should be api.user.create\", function () {",
											"   pm.expect(jsonResponse.id).to.eql(\"api.ssouser.create\");",
											"});",
											"pm.test(\"ver should be v1\", function () {",
											"   pm.expect(jsonResponse.ver).to.eql(\"v1\");",
											"});",
											"pm.test(\"params.status should be SUCCESS\", function () {",
											"    pm.expect(jsonResponse.params.status).to.eql(\"SUCCESS\");",
											"});",
											"pm.test(\"responseCode should be OK\", function () {",
											"    pm.expect(jsonResponse.responseCode).to.eql(\"OK\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}",
										"type": "text"
									},
									{
										"key": "X-Authenticated-User-token",
										"value": "{{keycloak_access_token}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"firstName\": \"{{random_first_name}}\",\n        \"email\": \"{{random_email}}\",\n        \"lastname\": \"{{random_last_name}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{host}}/api/user/v1/sso/create"
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "SignupUser",
					"item": [
						{
							"name": "SignUpUserV1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonResponse = pm.response.json()",
											"",
											"//Verification",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200)",
											"});",
											"pm.test(\"Content-Type header is present\", () => {",
											"  pm.response.to.have.header(\"Content-Type\");",
											"});",
											"pm.test(\"Content-Type header is application/json\", () => {",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"});",
											"",
											"pm.test(\"Test data type of the response and keys\", () => {",
											"  pm.expect(jsonResponse).to.be.an(\"object\").that.has.all.keys('id', 'ver', 'ts', 'params', 'responseCode', 'result');",
											"  pm.expect(jsonResponse.id).to.be.a(\"string\");",
											"  pm.expect(jsonResponse.ver).to.be.a(\"string\");",
											"  pm.expect(jsonResponse.ts).to.be.a(\"string\");",
											"  pm.expect(jsonResponse.responseCode).to.be.a(\"string\");",
											"  pm.expect(jsonResponse.params).to.be.an(\"object\").that.has.all.keys('resmsgid', 'msgid', 'err', 'status', 'errmsg');",
											"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");",
											"  pm.expect(jsonResponse.params.msgid).to.be.a(\"string\");",
											"  pm.expect(jsonResponse.params.err).to.be.null;",
											"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");",
											"  pm.expect(jsonResponse.params.errmsg).to.be.null;",
											"  pm.expect(jsonResponse.result).to.be.an(\"object\");",
											"  pm.expect(jsonResponse.result).to.have.all.keys('userId', 'response');",
											"  pm.expect(jsonResponse.result.userId).to.be.a(\"string\");",
											"  pm.expect(jsonResponse.result.response).to.be.a(\"string\");",
											"});",
											"",
											"//Validation",
											"pm.test(\"id should be api.user.create\", function () {",
											"   pm.expect(jsonResponse.id).to.eql(\"api.user.signup\");",
											"});",
											"pm.test(\"ver should be v1\", function () {",
											"   pm.expect(jsonResponse.ver).to.eql(\"v1\");",
											"});",
											"pm.test(\"params.status should be SUCCESS\", function () {",
											"    pm.expect(jsonResponse.params.status).to.eql(\"SUCCESS\");",
											"});",
											"pm.test(\"responseCode should be OK\", function () {",
											"    pm.expect(jsonResponse.responseCode).to.eql(\"OK\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"request\": {\n    \"firstName\": \"{{random_first_name}}\",\n    \"password\": \"{{random_password}}\",\n    \"email\": \"{{random_email}}\",\n    \"lastname\": \"{{random_last_name}}\",\n    \"userName\": \"{{random_user_name}}\",\n    \"emailVerified\": true\n  }\n}"
								},
								"url": "{{host}}/api/user/v1/signup"
							},
							"response": []
						},
						{
							"name": "SignUpUserV2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonResponse = pm.response.json()",
											"",
											"//Verification",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200)",
											"});",
											"pm.test(\"Content-Type header is present\", () => {",
											"  pm.response.to.have.header(\"Content-Type\");",
											"});",
											"pm.test(\"Content-Type header is application/json\", () => {",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"});",
											"",
											"pm.test(\"Test data type of the response and keys\", () => {",
											"  pm.expect(jsonResponse).to.be.an(\"object\").that.has.all.keys('id', 'ver', 'ts', 'params', 'responseCode', 'result');",
											"  pm.expect(jsonResponse.id).to.be.a(\"string\");",
											"  pm.expect(jsonResponse.ver).to.be.a(\"string\");",
											"  pm.expect(jsonResponse.ts).to.be.a(\"string\");",
											"  pm.expect(jsonResponse.responseCode).to.be.a(\"string\");",
											"  pm.expect(jsonResponse.params).to.be.an(\"object\").that.has.all.keys('resmsgid', 'msgid', 'err', 'status', 'errmsg');",
											"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");",
											"  pm.expect(jsonResponse.params.msgid).to.be.a(\"string\");",
											"  pm.expect(jsonResponse.params.err).to.be.null;",
											"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");",
											"  pm.expect(jsonResponse.params.errmsg).to.be.null;",
											"  pm.expect(jsonResponse.result).to.be.an(\"object\");",
											"  pm.expect(jsonResponse.result).to.have.all.keys('userId', 'response');",
											"  pm.expect(jsonResponse.result.userId).to.be.a(\"string\");",
											"  pm.expect(jsonResponse.result.response).to.be.a(\"string\");",
											"});",
											"",
											"//Validation",
											"pm.test(\"id should be api.user.create\", function () {",
											"   pm.expect(jsonResponse.id).to.eql(\"api.user.signup\");",
											"});",
											"pm.test(\"ver should be v2\", function () {",
											"   pm.expect(jsonResponse.ver).to.eql(\"v2\");",
											"});",
											"pm.test(\"params.status should be SUCCESS\", function () {",
											"    pm.expect(jsonResponse.params.status).to.eql(\"SUCCESS\");",
											"});",
											"pm.test(\"responseCode should be OK\", function () {",
											"    pm.expect(jsonResponse.responseCode).to.eql(\"OK\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"firstName\": \"{{random_first_name}}\",\n        \"password\": \"{{random_password}}\",\n        \"email\": \"{{random_email}}\",\n        \"lastname\": \"{{random_last_name}}\",\n        \"userName\": \"{{random_user_name}}\"\n    }\n}"
								},
								"url": "{{host}}/api/user/v2/signup"
							},
							"response": []
						}
					]
				},
				{
					"name": "AuthToken",
					"item": [
						{
							"name": "UserToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonResponse = pm.response.json();",
											"",
											"// Set global variable",
											"// pm.variables.set('refresh_token', jsonResponse.refresh_token);",
											"// pm.globals.set(\"refresh_token\", jsonResponse.result.identifier);",
											"pm.collectionVariables.set(\"refresh_token\", jsonResponse.refresh_token);",
											"// pm.collectionVariables.set(\"variable_key\", \"variable_value\");",
											"",
											"// Verification",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type header is application/json\", () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"});",
											"",
											"pm.test(\"Access token is present\", () => {",
											"    pm.expect(jsonResponse).to.have.property('access_token');",
											"});",
											"",
											"pm.test(\"Token type is bearer\", () => {",
											"    pm.expect(jsonResponse.token_type).to.eql('bearer');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "{{auth_client_id}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{auth_client_secret}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "text"
										}
									]
								},
								"url": "{{host}}/auth/realms/sunbird/protocol/openid-connect/token"
							},
							"response": []
						},
						{
							"name": "RefreshToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Extract the locationId from the response and set it to the environment variable",
											"pm.test(\"Set access_token in environment variable\", function () {",
											"    const responseJson = pm.response.json();",
											"    pm.environment.set(\"keycloak_access_token\", responseJson.result.access_token);",
											"});",
											"",
											"let jsonResponse = pm.response.json();",
											"",
											"// Verification",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type header is application/json\", () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
											"});",
											"",
											"// Validation",
											"pm.test(\"id should be api.refresh.token\", function () {",
											"   pm.expect(jsonResponse.id).to.eql(\"api.refresh.token\");",
											"});",
											"",
											"pm.test(\"ver should be 1.0\", function () {",
											"   pm.expect(jsonResponse.ver).to.eql(\"1.0\");",
											"});",
											"",
											"pm.test(\"params.status should be successful\", function () {",
											"    pm.expect(jsonResponse.params.status).to.eql(\"successful\");",
											"});",
											"",
											"// Validate result properties",
											"pm.test(\"result should have necessary properties\", function () {",
											"    pm.expect(jsonResponse.result).to.have.property(\"access_token\");",
											"    pm.expect(jsonResponse.result).to.have.property(\"expires_in\");",
											"    pm.expect(jsonResponse.result).to.have.property(\"refresh_expires_in\");",
											"    pm.expect(jsonResponse.result).to.have.property(\"refresh_token\");",
											"});",
											"",
											"// Additional validation for specific properties",
											"pm.test(\"access_token should be a non-empty string\", function () {",
											"    pm.expect(jsonResponse.result.access_token).to.be.a(\"string\").and.not.empty;",
											"});",
											"",
											"pm.test(\"expires_in should be a positive number\", function () {",
											"    pm.expect(jsonResponse.result.expires_in).to.be.a(\"number\").and.above(0);",
											"});",
											"",
											"pm.test(\"refresh_expires_in should be a positive number\", function () {",
											"    pm.expect(jsonResponse.result.refresh_expires_in).to.be.a(\"number\").and.above(0);",
											"});",
											"",
											"pm.test(\"refresh_token should be a non-empty string\", function () {",
											"    pm.expect(jsonResponse.result.refresh_token).to.be.a(\"string\").and.not.empty;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "refresh_token",
											"value": "{{refresh_token}}",
											"type": "text"
										}
									]
								},
								"url": "{{host}}/auth/v1/refresh/token"
							},
							"response": []
						}
					]
				},
				{
					"name": "ReadUser",
					"item": [
						{
							"name": "ReadUserV1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonResponse = pm.response.json();",
											"",
											"// Verification",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type header is application/json\", () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
											"});",
											"",
											"pm.test(\"id should start with api.user.read\", function () {",
											"   pm.expect(jsonResponse.id).to.match(/^api\\.user\\.read/);",
											"});",
											"",
											"pm.test(\"ver should be v1\", function () {",
											"   pm.expect(jsonResponse.ver).to.eql(\"v1\");",
											"});",
											"",
											"pm.test(\"params.status should be SUCCESS\", function () {",
											"    pm.expect(jsonResponse.params.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(\"responseCode should be OK\", function () {",
											"    pm.expect(jsonResponse.responseCode).to.eql(\"OK\");",
											"});",
											"",
											"pm.test(\"result should have necessary properties\", function () {",
											"    pm.expect(jsonResponse.result).to.have.property(\"response\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}"
									},
									{
										"key": "X-Authenticated-User-token",
										"value": "{{keycloak_access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": "{{host}}/api/user/v1/read/{{user_id}}"
							},
							"response": []
						},
						{
							"name": "ReadUserV2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonResponse = pm.response.json();",
											"",
											"// Verification",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type header is application/json\", () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
											"});",
											"",
											"pm.test(\"id should start with api.user.read\", function () {",
											"   pm.expect(jsonResponse.id).to.match(/^api\\.user\\.read/);",
											"});",
											"",
											"pm.test(\"ver should be v2\", function () {",
											"   pm.expect(jsonResponse.ver).to.eql(\"v2\");",
											"});",
											"",
											"pm.test(\"params.status should be SUCCESS\", function () {",
											"    pm.expect(jsonResponse.params.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(\"responseCode should be OK\", function () {",
											"    pm.expect(jsonResponse.responseCode).to.eql(\"OK\");",
											"});",
											"",
											"pm.test(\"result should have necessary properties\", function () {",
											"    pm.expect(jsonResponse.result).to.have.property(\"response\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}"
									},
									{
										"key": "X-Authenticated-User-token",
										"value": "{{keycloak_access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": "{{host}}/api/user/v2/read/{{user_id}}"
							},
							"response": []
						},
						{
							"name": "ReadUserV3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonResponse = pm.response.json();",
											"",
											"// Verification",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type header is application/json\", () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
											"});",
											"",
											"pm.test(\"id should start with api.user.read\", function () {",
											"   pm.expect(jsonResponse.id).to.match(/^api\\.user\\.read/);",
											"});",
											"",
											"pm.test(\"ver should be v3\", function () {",
											"   pm.expect(jsonResponse.ver).to.eql(\"v3\");",
											"});",
											"",
											"pm.test(\"params.status should be SUCCESS\", function () {",
											"    pm.expect(jsonResponse.params.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(\"responseCode should be OK\", function () {",
											"    pm.expect(jsonResponse.responseCode).to.eql(\"OK\");",
											"});",
											"",
											"pm.test(\"result should have necessary properties\", function () {",
											"    pm.expect(jsonResponse.result).to.have.property(\"response\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}"
									},
									{
										"key": "X-Authenticated-User-token",
										"value": "{{keycloak_access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": "{{host}}/api/user/v3/read/{{user_id}}"
							},
							"response": []
						},
						{
							"name": "ReadUserV4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonResponse = pm.response.json();",
											"",
											"// Verification",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type header is application/json\", () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
											"});",
											"",
											"pm.test(\"id should start with api.user.read\", function () {",
											"   pm.expect(jsonResponse.id).to.match(/^api\\.user\\.read/);",
											"});",
											"",
											"pm.test(\"ver should be v4\", function () {",
											"   pm.expect(jsonResponse.ver).to.eql(\"v4\");",
											"});",
											"",
											"pm.test(\"params.status should be SUCCESS\", function () {",
											"    pm.expect(jsonResponse.params.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(\"responseCode should be OK\", function () {",
											"    pm.expect(jsonResponse.responseCode).to.eql(\"OK\");",
											"});",
											"",
											"pm.test(\"result should have necessary properties\", function () {",
											"    pm.expect(jsonResponse.result).to.have.property(\"response\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}"
									},
									{
										"key": "X-Authenticated-User-token",
										"value": "{{keycloak_access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": "{{host}}/api/user/v4/read/{{user_id}}"
							},
							"response": []
						},
						{
							"name": "ReadUserV5",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonResponse = pm.response.json();",
											"",
											"// Verification",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type header is application/json\", () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
											"});",
											"",
											"pm.test(\"id should start with api.user.read\", function () {",
											"   pm.expect(jsonResponse.id).to.match(/^api\\.user\\.read/);",
											"});",
											"",
											"pm.test(\"ver should be v5\", function () {",
											"   pm.expect(jsonResponse.ver).to.eql(\"v5\");",
											"});",
											"",
											"pm.test(\"params.status should be SUCCESS\", function () {",
											"    pm.expect(jsonResponse.params.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(\"responseCode should be OK\", function () {",
											"    pm.expect(jsonResponse.responseCode).to.eql(\"OK\");",
											"});",
											"",
											"pm.test(\"result should have necessary properties\", function () {",
											"    pm.expect(jsonResponse.result).to.have.property(\"response\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}"
									},
									{
										"key": "X-Authenticated-User-token",
										"value": "{{keycloak_access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": "{{host}}/api/user/v5/read/{{user_id}}"
							},
							"response": []
						},
						{
							"name": "GetUserIdByTypeV1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonResponse = pm.response.json();",
											"",
											"// Verification",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type header is application/json\", () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
											"});",
											"",
											"// Validation",
											"pm.test(\"id should start with api.user.get.email\", function () {",
											"   pm.expect(jsonResponse.id).to.match(/^api\\.user\\.get\\.email/);",
											"});",
											"",
											"pm.test(\"ver should be v1\", function () {",
											"   pm.expect(jsonResponse.ver).to.eql(\"v1\");",
											"});",
											"",
											"pm.test(\"params.status should be SUCCESS\", function () {",
											"    pm.expect(jsonResponse.params.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(\"responseCode should be OK\", function () {",
											"    pm.expect(jsonResponse.responseCode).to.eql(\"OK\");",
											"});",
											"",
											"// Validate result properties",
											"pm.test(\"result should have necessary properties\", function () {",
											"    pm.expect(jsonResponse.result).to.have.property(\"response\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": "{{host}}/api/user/v1/get/email/{{username}}"
							},
							"response": []
						},
						{
							"name": "GetManagedUserV1",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}",
										"type": "text"
									},
									{
										"key": "X-Authenticated-User-token",
										"value": "{{keycloak_access_token}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": "{{host}}/api/user/v1/managed/{{managed_user_id}}"
							},
							"response": []
						}
					]
				},
				{
					"name": "SearchUser",
					"item": [
						{
							"name": "SearchUserV1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonResponse = pm.response.json();",
											"",
											"// Verification",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type header is application/json\", () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
											"});",
											"",
											"// Validation",
											"pm.test(\"id should start with api.user.search\", function () {",
											"   pm.expect(jsonResponse.id).to.match(/^api\\.user\\.search/);",
											"});",
											"",
											"pm.test(\"ver should be v1\", function () {",
											"   pm.expect(jsonResponse.ver).to.eql(\"v1\");",
											"});",
											"",
											"pm.test(\"params.status should be SUCCESS\", function () {",
											"    pm.expect(jsonResponse.params.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(\"responseCode should be OK\", function () {",
											"    pm.expect(jsonResponse.responseCode).to.eql(\"OK\");",
											"});",
											"",
											"// Validate result properties",
											"pm.test(\"result should have necessary properties\", function () {",
											"    pm.expect(jsonResponse.result).to.have.property(\"response\");",
											"    pm.expect(jsonResponse.result.response).to.have.property(\"count\").and.eql(1);",
											"    pm.expect(jsonResponse.result.response).to.have.property(\"content\").and.be.an('array');",
											"    pm.expect(jsonResponse.result.response.content).to.have.length(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}"
									},
									{
										"key": "X-Authenticated-User-token",
										"value": "{{keycloak_access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"filters\": {\n            \"email\": \"{{username}}\"\n        }\n    }\n}"
								},
								"url": "{{host}}/api/user/v1/search"
							},
							"response": []
						},
						{
							"name": "SearchUserV2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonResponse = pm.response.json();",
											"",
											"// Verification",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type header is application/json\", () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
											"});",
											"",
											"// Validation",
											"pm.test(\"id should start with api.user.search\", function () {",
											"   pm.expect(jsonResponse.id).to.match(/^api\\.user\\.search/);",
											"});",
											"",
											"pm.test(\"ver should be v2\", function () {",
											"   pm.expect(jsonResponse.ver).to.eql(\"v2\");",
											"});",
											"",
											"pm.test(\"params.status should be SUCCESS\", function () {",
											"    pm.expect(jsonResponse.params.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(\"responseCode should be OK\", function () {",
											"    pm.expect(jsonResponse.responseCode).to.eql(\"OK\");",
											"});",
											"",
											"// Validate result properties",
											"pm.test(\"result should have necessary properties\", function () {",
											"    pm.expect(jsonResponse.result).to.have.property(\"response\");",
											"    pm.expect(jsonResponse.result.response).to.have.property(\"count\").and.eql(1);",
											"    pm.expect(jsonResponse.result.response).to.have.property(\"content\").and.be.an('array');",
											"    pm.expect(jsonResponse.result.response.content).to.have.length(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}"
									},
									{
										"key": "X-Authenticated-User-token",
										"value": "{{keycloak_access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"filters\": {\n            \"email\": \"{{username}}\"\n        }\n    }\n}"
								},
								"url": "{{host}}/api/user/v2/search"
							},
							"response": []
						},
						{
							"name": "SearchUserV3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonResponse = pm.response.json();",
											"",
											"// Verification",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type header is application/json\", () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
											"});",
											"",
											"// Validation",
											"pm.test(\"id should start with api.user.search\", function () {",
											"   pm.expect(jsonResponse.id).to.match(/^api\\.user\\.search/);",
											"});",
											"",
											"pm.test(\"ver should be v3\", function () {",
											"   pm.expect(jsonResponse.ver).to.eql(\"v3\");",
											"});",
											"",
											"pm.test(\"params.status should be SUCCESS\", function () {",
											"    pm.expect(jsonResponse.params.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(\"responseCode should be OK\", function () {",
											"    pm.expect(jsonResponse.responseCode).to.eql(\"OK\");",
											"});",
											"",
											"// Validate result properties",
											"pm.test(\"result should have necessary properties\", function () {",
											"    pm.expect(jsonResponse.result).to.have.property(\"response\");",
											"    pm.expect(jsonResponse.result.response).to.have.property(\"count\").and.eql(1);",
											"    pm.expect(jsonResponse.result.response).to.have.property(\"content\").and.be.an('array');",
											"    pm.expect(jsonResponse.result.response.content).to.have.length(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}"
									},
									{
										"key": "X-Authenticated-User-token",
										"value": "{{keycloak_access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"filters\": {\n            \"roles.role\": [\n                \"BOOK_REVIEWER\"\n            ]\n        },\n        \"fields\":[\"roles\".\"role\"]\n    }\n}"
								},
								"url": "{{host}}/api/user/v3/search"
							},
							"response": []
						}
					]
				},
				{
					"name": "UpdateUser",
					"item": [
						{
							"name": "UpdateUserV1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonResponse = pm.response.json();",
											"",
											"// Verification",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type header is application/json\", () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
											"});",
											"",
											"// Validation",
											"pm.test(\"id should start with api.user.update\", function () {",
											"   pm.expect(jsonResponse.id).to.eql(\"api.user.update\");",
											"});",
											"",
											"pm.test(\"ver should be v1\", function () {",
											"   pm.expect(jsonResponse.ver).to.eql(\"v1\");",
											"});",
											"",
											"pm.test(\"params.status should be SUCCESS\", function () {",
											"    pm.expect(jsonResponse.params.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(\"responseCode should be OK\", function () {",
											"    pm.expect(jsonResponse.responseCode).to.eql(\"OK\");",
											"});",
											"",
											"// Validate result properties",
											"pm.test(\"result should have necessary properties\", function () {",
											"    pm.expect(jsonResponse.result).to.have.property(\"response\").and.eql(\"SUCCESS\");",
											"    pm.expect(jsonResponse.result).to.have.property(\"errors\").and.be.an('array');",
											"});",
											"",
											"// Additional validation as needed",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}"
									},
									{
										"key": "X-Authenticated-User-token",
										"value": "{{keycloak_access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"userId\": \"{{user_id}}\",\n        \"phone\": \"{{random_phone_number}}\"\n    }\n}"
								},
								"url": "{{host}}/api/user/v1/update"
							},
							"response": []
						},
						{
							"name": "UpdateUserV2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonResponse = pm.response.json();",
											"",
											"// Verification",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type header is application/json\", () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
											"});",
											"",
											"// Validation",
											"pm.test(\"id should start with api.user.update\", function () {",
											"   pm.expect(jsonResponse.id).to.eql(\"api.user.update\");",
											"});",
											"",
											"pm.test(\"ver should be v2\", function () {",
											"   pm.expect(jsonResponse.ver).to.eql(\"v2\");",
											"});",
											"",
											"pm.test(\"params.status should be SUCCESS\", function () {",
											"    pm.expect(jsonResponse.params.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(\"responseCode should be OK\", function () {",
											"    pm.expect(jsonResponse.responseCode).to.eql(\"OK\");",
											"});",
											"",
											"// Validate result properties",
											"pm.test(\"result should have necessary properties\", function () {",
											"    pm.expect(jsonResponse.result).to.have.property(\"response\").and.eql(\"SUCCESS\");",
											"    pm.expect(jsonResponse.result).to.have.property(\"errors\").and.be.an('array');",
											"});",
											"",
											"// Additional validation as needed",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}"
									},
									{
										"key": "X-Authenticated-User-token",
										"value": "{{keycloak_access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"userId\": \"{{user_id}}\",\n        \"phone\": \"{{random_phone_number}}\"\n    }\n}"
								},
								"url": "{{host}}/api/user/v2/update"
							},
							"response": []
						},
						{
							"name": "UpdateUserV3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonResponse = pm.response.json();",
											"",
											"// Verification",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type header is application/json\", () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
											"});",
											"",
											"// Validation",
											"pm.test(\"id should start with api.user.update\", function () {",
											"   pm.expect(jsonResponse.id).to.eql(\"api.user.update\");",
											"});",
											"",
											"pm.test(\"ver should be v3\", function () {",
											"   pm.expect(jsonResponse.ver).to.eql(\"v3\");",
											"});",
											"",
											"pm.test(\"params.status should be SUCCESS\", function () {",
											"    pm.expect(jsonResponse.params.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(\"responseCode should be OK\", function () {",
											"    pm.expect(jsonResponse.responseCode).to.eql(\"OK\");",
											"});",
											"",
											"// Validate result properties",
											"pm.test(\"result should have necessary properties\", function () {",
											"    pm.expect(jsonResponse.result).to.have.property(\"response\").and.eql(\"SUCCESS\");",
											"    pm.expect(jsonResponse.result).to.have.property(\"errors\").and.be.an('array');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}"
									},
									{
										"key": "X-Authenticated-User-token",
										"value": "{{keycloak_access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"userId\": \"{{user_id}}\",\n        \"phone\": \"{{random_phone_number}}\"\n    }\n}"
								},
								"url": "{{host}}/api/user/v3/update"
							},
							"response": []
						}
					]
				},
				{
					"name": "DeleteUser",
					"item": [
						{
							"name": "DeleteUserV1",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}"
									},
									{
										"key": "X-Authenticated-User-token",
										"value": "{{keycloak_access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"userId\": \"{{user_id}}\"\n    }\n}"
								},
								"url": "{{host}}/api/user/v1/delete"
							},
							"response": []
						}
					]
				},
				{
					"name": "OwnershipTransferUser",
					"item": [
						{
							"name": "Ownership Transfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}"
									},
									{
										"key": "X-Authenticated-User-token",
										"value": "{{keycloak_access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"context\": \"User Deletion\",\n        \"organisationId\": \"01379163320993382431\",\n        \"actionBy\": {\n            \"userId\": \"842e2f00-16d3-487b-99c2-576667e99f22\"\n        },\n        \"fromUser\": {\n            \"userId\": \"9b199b2b-54fa-47ba-9272-bb441645ca63\",\n            \"roles\": [\n                {\n                    \"role\": \"BOOK_CREATOR\",\n                    \"scope\": [\n                        {\n                            \"organisationId\": \"01379163320993382431\"\n                        }\n                    ]\n                },\n                {\n                    \"role\": \"CONTENT_CREATOR\",\n                    \"scope\": [\n                        {\n                            \"organisationId\": \"01379163320993382431\"\n                        }\n                    ]\n                }\n            ]\n        },\n        \"toUser\": {\n            \"userId\": \"30122dd1-5bb0-4bf6-9f90-6969e059cb83\",\n            \"roles\": [\n                {\n                    \"role\": \"BOOK_CREATOR\",\n                    \"scope\": [\n                        {\n                            \"organisationId\": \"01379163320993382431\"\n                        }\n                    ]\n                },\n                {\n                    \"role\": \"CONTENT_CREATOR\",\n                    \"scope\": [\n                        {\n                            \"organisationId\": \"01379163320993382431\"\n                        }\n                    ]\n                }\n            ]\n        },\n        \"objects\": []\n    }\n}"
								},
								"url": "{{host}}/api/user/v1/ownership/transfer"
							},
							"response": []
						}
					]
				},
				{
					"name": "RoleAPIs",
					"item": [
						{
							"name": "RoleAssignV1",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}",
										"type": "text"
									},
									{
										"key": "X-Authenticated-User-token",
										"value": "{{keycloak_access_token}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"userId\": \"{{user_id}}\",\n        \"organisationId\": \"{{org_id}}\",\n        \"roles\": [\n            \"ADMIN\"\n        ]\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{host}}/api/user/v1/role/assign"
							},
							"response": []
						},
						{
							"name": "RoleAssignV2",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}",
										"type": "text"
									},
									{
										"key": "X-Authenticated-User-token",
										"value": "{{keycloak_access_token}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"userId\": \"{{user_id}}\",\n        \"roles\": [\n            {\n                \"role\": \"CONTENT_CREATOR\",\n                \"operation\": \"remove\",\n                \"scope\": [\n                    {\n                        \"organisationId\": \"{{org_id}}\"\n                    }\n                ]\n            }\n        ]\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{host}}/api/user/v2/role/assign"
							},
							"response": []
						}
					]
				},
				{
					"name": "BlockUnblockUser",
					"item": [
						{
							"name": "BlockUserV1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonResponse = pm.response.json();",
											"",
											"// Verification",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type header is application/json\", () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
											"});",
											"",
											"// Validation",
											"pm.test(\"id should start with api.user.block\", function () {",
											"   pm.expect(jsonResponse.id).to.eql(\"api.user.block\");",
											"});",
											"",
											"pm.test(\"ver should be v1\", function () {",
											"   pm.expect(jsonResponse.ver).to.eql(\"v1\");",
											"});",
											"",
											"pm.test(\"params.status should be SUCCESS\", function () {",
											"    pm.expect(jsonResponse.params.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(\"responseCode should be OK\", function () {",
											"    pm.expect(jsonResponse.responseCode).to.eql(\"OK\");",
											"});",
											"",
											"// Validate result properties",
											"pm.test(\"result should have necessary properties\", function () {",
											"    pm.expect(jsonResponse.result).to.have.property(\"response\").and.eql(\"SUCCESS\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}"
									},
									{
										"key": "X-Authenticated-User-token",
										"value": "{{keycloak_access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"userId\": \"{{user_id}}\"\n    }\n}"
								},
								"url": "{{host}}/api/user/v1/block"
							},
							"response": []
						},
						{
							"name": "UnBlockUserV1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonResponse = pm.response.json();",
											"",
											"// Verification",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type header is application/json\", () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
											"});",
											"",
											"// Validation",
											"pm.test(\"id should start with api.user.unblock\", function () {",
											"   pm.expect(jsonResponse.id).to.eql(\"api.user.unblock\");",
											"});",
											"",
											"pm.test(\"ver should be v1\", function () {",
											"   pm.expect(jsonResponse.ver).to.eql(\"v1\");",
											"});",
											"",
											"pm.test(\"params.status should be SUCCESS\", function () {",
											"    pm.expect(jsonResponse.params.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(\"responseCode should be OK\", function () {",
											"    pm.expect(jsonResponse.responseCode).to.eql(\"OK\");",
											"});",
											"",
											"// Validate result properties",
											"pm.test(\"result should have necessary properties\", function () {",
											"    pm.expect(jsonResponse.result).to.have.property(\"response\").and.eql(\"SUCCESS\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}"
									},
									{
										"key": "X-Authenticated-User-token",
										"value": "{{keycloak_access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"userId\": \"{{user_id}}\"\n    }\n}"
								},
								"url": "{{host}}/api/user/v1/unblock"
							},
							"response": []
						}
					]
				},
				{
					"name": "MergeUser",
					"item": [
						{
							"name": "MergeUserV1",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}",
										"type": "text"
									},
									{
										"key": "X-Authenticated-User-token",
										"value": "{{keycloak_access_token}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"fromAccountId\": \"{{user_id}}\",\n        \"toAccountId\": \"{{to_user_id}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{host}}/api/user/v1/account/merge"
							},
							"response": []
						}
					]
				},
				{
					"name": "MigrateUser",
					"item": [
						{
							"name": "MigrateUserV2",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}",
										"type": "text"
									},
									{
										"key": "X-Authenticated-User-token",
										"value": "{{keycloak_access_token}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"userId\": \"{{to_user_id}}\",\n        \"channel\": \"sunbird\",\n        \"externalIds\": [\n            {\n                \"id\": \"stag1-1\",\n                \"idType\": \"No Data\",\n                \"provider\": \"No Data\"\n            }\n        ]\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{host}}/api/user/v1/migrate"
							},
							"response": []
						}
					]
				},
				{
					"name": "UpdateUserDeclaration",
					"item": [
						{
							"name": "UpdateUserDeclarationsV1",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}",
										"type": "text"
									},
									{
										"key": "X-Authenticated-User-token",
										"value": "{{keycloak_access_token}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"params\": {},\n    \"request\": {\n        \"declarations\": [\n            {\n                \"operation\": \"add\",\n                \"userId\": \"{{user_id}}\",\n                \"orgId\": \"{{org_id}}\",\n                \"persona\": \"teacher\",\n                \"info\": {\n                    \"declared-school-name\": \"mgm21\",\n                    \"declared-email\": \"abc@gmail.com\",\n                    \"declared-phone\": \"99999999\",\n                    \"declared-school-udise-code\": 190923\n                }\n            }\n        ]\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{host}}/api/user/v1/declarations"
							},
							"response": []
						}
					]
				},
				{
					"name": "ExistNotExistUser",
					"item": [
						{
							"name": "UserExistCheckV1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Parse the response body JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Verify the response properties",
											"pm.test(\"Response has the correct ID\", function () {",
											"    pm.expect(jsonResponse.id).to.match(/^api\\.user\\.exists/);",
											"});",
											"",
											"pm.test(\"Response has the correct version\", function () {",
											"    pm.expect(responseBody.ver).to.equal(\"v1\");",
											"});",
											"",
											"pm.test(\"Response has a timestamp\", function () {",
											"    pm.expect(responseBody.ts).to.be.a('string');",
											"});",
											"",
											"pm.test(\"Response status is SUCCESS\", function () {",
											"    pm.expect(responseBody.status).to.equal(\"SUCCESS\");",
											"});",
											"",
											"pm.test(\"Response has a responseCode of OK\", function () {",
											"    pm.expect(responseBody.responseCode).to.equal(\"OK\");",
											"});",
											"",
											"// Verify the result property",
											"pm.test(\"Result exists and is true\", function () {",
											"    pm.expect(responseBody.result.exists).to.be.true;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}",
										"type": "text"
									},
									{
										"key": "X-Authenticated-User-token",
										"value": "{{access_token}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": "{{host}}/api/user/v1/exists/email/{{username}}"
							},
							"response": []
						},
						{
							"name": "UserExistCheckV2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Parse the response body JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Verify the response properties",
											"pm.test(\"Response has the correct ID\", function () {",
											"    pm.expect(jsonResponse.id).to.match(/^api\\.user\\.exists/);",
											"});",
											"",
											"pm.test(\"Response has the correct version\", function () {",
											"    pm.expect(responseBody.ver).to.equal(\"v2\");",
											"});",
											"",
											"pm.test(\"Response has a timestamp\", function () {",
											"    pm.expect(responseBody.ts).to.be.a('string');",
											"});",
											"",
											"pm.test(\"Response status is SUCCESS\", function () {",
											"    pm.expect(responseBody.status).to.equal(\"SUCCESS\");",
											"});",
											"",
											"pm.test(\"Response has a responseCode of OK\", function () {",
											"    pm.expect(responseBody.responseCode).to.equal(\"OK\");",
											"});",
											"",
											"// Verify the result property",
											"pm.test(\"Result exists and is true\", function () {",
											"    pm.expect(responseBody.result.exists).to.be.true;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}",
										"type": "text"
									},
									{
										"key": "X-Authenticated-User-token",
										"value": "{{keycloak_access_token}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": "{{host}}/api/user/v2/exists/email/{{username}}"
							},
							"response": []
						}
					]
				},
				{
					"name": "TncUser",
					"item": [
						{
							"name": "AcceptUserTncV1",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}"
									},
									{
										"key": "X-Authenticated-User-token",
										"value": "{{keycloak_access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"tncType\": \"reportViewerTnc\",\n        \"version\": \"4.0.0\"\n    }\n}"
								},
								"url": "{{host}}/api/user/v1/tnc/accept"
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "OrganisationAPIs",
			"item": [
				{
					"name": "CreateOrganisation",
					"item": [
						{
							"name": "CreateOrganisationV1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Set organisationId in environment variable\", function () {",
											"    const responseJson = pm.response.json();",
											"    pm.environment.set(\"org_id\", responseJson.result.organisationId);",
											"});",
											"",
											"let jsonResponse = pm.response.json();",
											"",
											"// Verification",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type header is present\", () => {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Content-Type header is application/json\", () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"});",
											"",
											"pm.test(\"Test data type of the response and keys\", () => {",
											"    pm.expect(jsonResponse).to.be.an(\"object\").that.has.all.keys(",
											"        'id', 'ver', 'ts', 'params', 'responseCode', 'result'",
											"    );",
											"",
											"    pm.expect(jsonResponse.id).to.be.a(\"string\");",
											"    pm.expect(jsonResponse.ver).to.be.a(\"string\");",
											"    pm.expect(jsonResponse.ts).to.be.a(\"string\");",
											"    pm.expect(jsonResponse.responseCode).to.be.a(\"string\");",
											"",
											"    pm.expect(jsonResponse.params).to.be.an(\"object\").that.has.all.keys(",
											"        'resmsgid', 'msgid', 'err', 'status', 'errmsg'",
											"    );",
											"",
											"    pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");",
											"    pm.expect(jsonResponse.params.msgid).to.be.a(\"string\");",
											"    pm.expect(jsonResponse.params.err).to.be.null;",
											"    pm.expect(jsonResponse.params.status).to.be.a(\"string\");",
											"    pm.expect(jsonResponse.params.errmsg).to.be.null;",
											"",
											"    pm.expect(jsonResponse.result).to.be.an(\"object\").that.has.all.keys(",
											"        'organisationId', 'response'",
											"    );",
											"",
											"    pm.expect(jsonResponse.result.organisationId).to.be.a(\"string\");",
											"    pm.expect(jsonResponse.result.response).to.be.a(\"string\");",
											"});",
											"",
											"// Validation",
											"pm.test(\"id should be api.org.create\", function () {",
											"    pm.expect(jsonResponse.id).to.eql(\"api.org.create\");",
											"});",
											"",
											"pm.test(\"ver should be v1\", function () {",
											"    pm.expect(jsonResponse.ver).to.eql(\"v1\");",
											"});",
											"",
											"pm.test(\"params.status should be SUCCESS\", function () {",
											"    pm.expect(jsonResponse.params.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(\"responseCode should be OK\", function () {",
											"    pm.expect(jsonResponse.responseCode).to.eql(\"OK\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"request\": {\n    \"orgName\": \"{{random_org_name}}\",\n    \"channel\": \"{{random_channel_name}}\",\n    \"description\": \"Description\",\n    \"externalId\": \"ExtId\",\n    \"email\": \"{{random_email}}\",\n    \"isSSOEnabled\": true,\n    \"organisationType\": \"school\",\n    \"isTenant\": true\n  }\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{host}}/api/org/v1/create",
								"description": "This API is for creation of a new Organisation on the Sunbird Platform.\n  - The endpoint for **Create a new Organisation** is `/org/v1/create`\n  - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
							},
							"response": []
						}
					]
				},
				{
					"name": "ReadOrganisation",
					"item": [
						{
							"name": "ReadOrganisationV1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonResponse = pm.response.json();",
											"",
											"// Verification",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type header is present\", () => {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Content-Type header is application/json\", () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"});",
											"",
											"pm.test(\"Test data type of the response and keys\", () => {",
											"    pm.expect(jsonResponse).to.be.an(\"object\").that.has.all.keys(",
											"        'id', 'ver', 'ts', 'params', 'responseCode', 'result'",
											"    );",
											"",
											"    pm.expect(jsonResponse.id).to.be.a(\"string\");",
											"    pm.expect(jsonResponse.ver).to.be.a(\"string\");",
											"    pm.expect(jsonResponse.ts).to.be.a(\"string\");",
											"    pm.expect(jsonResponse.responseCode).to.be.a(\"string\");",
											"",
											"    pm.expect(jsonResponse.params).to.be.an(\"object\").that.has.all.keys(",
											"        'resmsgid', 'msgid', 'err', 'status', 'errmsg'",
											"    );",
											"",
											"    pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");",
											"    pm.expect(jsonResponse.params.msgid).to.be.a(\"string\");",
											"    pm.expect(jsonResponse.params.err).to.be.null;",
											"    pm.expect(jsonResponse.params.status).to.be.a(\"string\");",
											"    pm.expect(jsonResponse.params.errmsg).to.be.null;",
											"",
											"    pm.expect(jsonResponse.result).to.be.an(\"object\").that.has.all.keys(",
											"        'response'",
											"    );",
											"});",
											"",
											"// Validation",
											"pm.test(\"id should be api.org.read\", function () {",
											"    pm.expect(jsonResponse.id).to.eql(\"api.org.read\");",
											"});",
											"",
											"pm.test(\"ver should be v1\", function () {",
											"    pm.expect(jsonResponse.ver).to.eql(\"v1\");",
											"});",
											"",
											"pm.test(\"params.status should be SUCCESS\", function () {",
											"    pm.expect(jsonResponse.params.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(\"responseCode should be OK\", function () {",
											"    pm.expect(jsonResponse.responseCode).to.eql(\"OK\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"request\": {\n    \"organisationId\": \"{{org_id}}\"\n  }\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{host}}/api/org/v1/read",
								"description": "This API is for viewing details of an existing Organisation on the Sunbird Platform.\n  - The endpoint for **Read Organisation details** is `/org/v1/read`\n  - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
							},
							"response": []
						}
					]
				},
				{
					"name": "SearchOrganisation",
					"item": [
						{
							"name": "SearchOrganisationV1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonResponse = pm.response.json();",
											"",
											"// Verification",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type header is present\", () => {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Content-Type header is application/json\", () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"});",
											"",
											"pm.test(\"Test data type of the response and keys\", () => {",
											"    pm.expect(jsonResponse).to.be.an(\"object\").that.has.all.keys(",
											"        'id', 'ver', 'ts', 'params', 'responseCode', 'result'",
											"    );",
											"",
											"    pm.expect(jsonResponse.id).to.be.a(\"string\");",
											"    pm.expect(jsonResponse.ver).to.be.a(\"string\");",
											"    pm.expect(jsonResponse.ts).to.be.a(\"string\");",
											"    pm.expect(jsonResponse.responseCode).to.be.a(\"string\");",
											"",
											"    pm.expect(jsonResponse.params).to.be.an(\"object\").that.has.all.keys(",
											"        'resmsgid', 'msgid', 'err', 'status', 'errmsg'",
											"    );",
											"",
											"    pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");",
											"    pm.expect(jsonResponse.params.msgid).to.be.a(\"string\");",
											"    pm.expect(jsonResponse.params.err).to.be.null;",
											"    pm.expect(jsonResponse.params.status).to.be.a(\"string\");",
											"    pm.expect(jsonResponse.params.errmsg).to.be.null;",
											"",
											"    pm.expect(jsonResponse.result).to.be.an(\"object\").that.has.all.keys(",
											"        'response'",
											"    );",
											"",
											"    pm.expect(jsonResponse.result.response).to.be.an(\"object\").that.has.all.keys(",
											"        'count', 'content'",
											"    );",
											"",
											"    pm.expect(jsonResponse.result.response.content).to.be.an(\"array\");",
											"    // Additional validation checks can be added for specific keys if needed",
											"});",
											"",
											"// Validation",
											"pm.test(\"id should be api.org.search\", function () {",
											"    pm.expect(jsonResponse.id).to.eql(\"api.org.search\");",
											"});",
											"",
											"pm.test(\"ver should be v1\", function () {",
											"    pm.expect(jsonResponse.ver).to.eql(\"v1\");",
											"});",
											"",
											"pm.test(\"params.status should be SUCCESS\", function () {",
											"    pm.expect(jsonResponse.params.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(\"responseCode should be OK\", function () {",
											"    pm.expect(jsonResponse.responseCode).to.eql(\"OK\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text",
										"description": "Timestamp at which given API request is sent."
									},
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}",
										"type": "text",
										"description": "This ID uniquely identifies a request if the same API is executed multiple times."
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"filters\": {}\n    }\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{host}}/api/org/v1/search",
								"description": "This API is for searching for Organisations on the Sunbird Platform.\n  - The endpoint for **Search for an Organisation** is `/org/v1/search`\n  - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
							},
							"response": []
						}
					]
				},
				{
					"name": "UpdateOrganisation",
					"item": [
						{
							"name": "UpdateOrganisationV1",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text",
										"description": "Timestamp at which given API request is sent."
									},
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}",
										"type": "text",
										"description": "This ID uniquely identifies a request if the same API is executed multiple times."
									},
									{
										"key": "X-Authenticated-User-token",
										"value": "{{keycloak_access_token}}",
										"type": "text",
										"description": "(Required) Access token of registered user performing given API request."
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"organisationId\": \"{{org_id}}\",\n        \"description\": \"updated description\",\n        \"orgName\": \"Updated Org Name\"\n    }\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{host}}/api/org/v1/update",
								"description": "This API is for updating details of an existing Organisation on the Sunbird Platform.\n  - The endpoint for **Update particulars of an existing Organisation** is `/org/v1/update`\n  - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
							},
							"response": []
						}
					]
				},
				{
					"name": "StatusUpdateOrganisation",
					"item": [
						{
							"name": "StatusUpdateOrganisationV1",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text",
										"description": "Timestamp at which given API request is sent."
									},
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}",
										"type": "text",
										"description": "This ID uniquely identifies a request if the same API is executed multiple times."
									},
									{
										"key": "X-Authenticated-User-token",
										"value": "{{keycloak_access_token}}",
										"type": "text",
										"description": "(Required) Access token of registered user performing given API request."
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"request\": {\n    \"organisationId\": \"{{org_id}}\",\n    \"status\": 3\n  }\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{host}}/api/org/v1/status/update",
								"description": "This API is for updating status of an existing Organisation on the Sunbird Platform.\n  - The endpoint for **Organisation update status** is `/org/v1/status/update`\n  - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
							},
							"response": []
						}
					]
				},
				{
					"name": "AssignKeyOrganisation",
					"item": [
						{
							"name": "AssignKeyOrganisationV1",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text",
										"description": "Timestamp at which given API request is sent."
									},
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}",
										"type": "text",
										"description": "This ID uniquely identifies a request if the same API is executed multiple times."
									},
									{
										"key": "X-Authenticated-User-token",
										"value": "{{keycloak_access_token}}",
										"type": "text",
										"description": "(Required) Access token of registered user performing given API request."
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"id\": \"{{org_id}}\",\n        \"signKeys\": [\n            \"S1\",\n            \"S2\"\n        ],\n        \"encKeys\": [\n            \"E1\",\n            \"E2\"\n        ]\n    }\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{host}}/api/org/v1/assign/key",
								"description": "This API is for creation/addition of keys to an Organisation"
							},
							"response": []
						}
					]
				},
				{
					"name": "UpdateEncryptionKeyOrganisation",
					"item": [
						{
							"name": "UpdateEncryptionKeyOrganisationV1",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}"
									},
									{
										"key": "X-Authenticated-User-token",
										"value": "{{keycloak_access_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "organisationId",
											"value": "{{org_id}}",
											"type": "text"
										},
										{
											"key": "encryptionKey",
											"type": "file",
											"src": []
										}
									]
								},
								"url": "{{host}}/api/org/v1/update/encryptionkey"
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "LocationAPIs",
			"item": [
				{
					"name": "CreateLocation",
					"item": [
						{
							"name": "CreateLocationV1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Extract the locationId from the response and set it to the environment variable",
											"pm.test(\"Set locationId in environment variable\", function () {",
											"    const responseJson = pm.response.json();",
											"    pm.environment.set(\"location_id\", responseJson.result.id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}",
										"type": "text"
									},
									{
										"key": "X-Authenticated-User-token",
										"value": "{{keycloak_access_token}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"code\": \"{{random_code}}\",\n        \"name\": \"{{random_location_name}}\",\n        \"type\": \"state\"\n    }\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{host}}/api/data/v1/location/create",
								"description": "This API is used to create a physical location of a user or an organization, depending upon the usecase\n  \n  - The endpoint for **Create location** is `/data/v1/location/create`\n  - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
							},
							"response": []
						}
					]
				},
				{
					"name": "SearchLocation",
					"item": [
						{
							"name": "SearchLocationV1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonResponse = pm.response.json();",
											"",
											"// Verification",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type header is present\", () => {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Content-Type header is application/json\", () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"});",
											"",
											"pm.test(\"Test data type of the response and keys\", () => {",
											"    pm.expect(jsonResponse).to.be.an(\"object\").that.has.all.keys(",
											"        'id', 'ver', 'ts', 'params', 'responseCode', 'result'",
											"    );",
											"",
											"    pm.expect(jsonResponse.id).to.be.a(\"string\");",
											"    pm.expect(jsonResponse.ver).to.be.a(\"string\");",
											"    pm.expect(jsonResponse.ts).to.be.a(\"string\");",
											"    pm.expect(jsonResponse.responseCode).to.be.a(\"string\");",
											"",
											"    pm.expect(jsonResponse.params).to.be.an(\"object\").that.has.all.keys(",
											"        'resmsgid', 'msgid', 'err', 'status', 'errmsg'",
											"    );",
											"",
											"    pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");",
											"    pm.expect(jsonResponse.params.msgid).to.be.a(\"string\");",
											"    pm.expect(jsonResponse.params.err).to.be.null;",
											"    pm.expect(jsonResponse.params.status).to.be.a(\"string\");",
											"    pm.expect(jsonResponse.params.errmsg).to.be.null;",
											"",
											"    pm.expect(jsonResponse.result).to.be.an(\"object\").that.has.all.keys(",
											"        'response', 'count'",
											"    );",
											"",
											"    pm.expect(jsonResponse.result.response[0]).to.be.an(\"object\").that.has.all.keys(",
											"        'identifier', 'code', 'name', 'id', 'type', 'parentId'",
											"    );",
											"",
											"    // Additional validation checks can be added for specific keys if needed",
											"});",
											"",
											"// Validation",
											"pm.test(\"id should be api.location.search\", function () {",
											"    pm.expect(jsonResponse.id).to.eql(\"api.location.search\");",
											"});",
											"",
											"pm.test(\"ver should be v1\", function () {",
											"    pm.expect(jsonResponse.ver).to.eql(\"v1\");",
											"});",
											"",
											"pm.test(\"params.status should be SUCCESS\", function () {",
											"    pm.expect(jsonResponse.params.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(\"responseCode should be OK\", function () {",
											"    pm.expect(jsonResponse.responseCode).to.eql(\"OK\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"filters\": {}\n    }\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{host}}/api/data/v1/location/search",
								"description": "This API is associated with fetching the location data based on the criterias specified in the request body.\n   - The endpoint for **Search location** is `/data/v1/location/search`\n   - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
							},
							"response": []
						}
					]
				},
				{
					"name": "UpdateLocation",
					"item": [
						{
							"name": "UpdateLocationV1",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}",
										"type": "text"
									},
									{
										"key": "X-Authenticated-User-token",
										"value": "{{keycloak_access_token}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"name\": \"{{random_location_name}}\",\n        \"id\": \"{{location_id}}\"\n    }\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{host}}/api/data/v1/location/update",
								"description": "This API is associated with updating the location data based on the location id,\n   - The endpoint for **Update location** is `/data/v1/location/update`\n   - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
							},
							"response": []
						}
					]
				},
				{
					"name": "DeleteLocation",
					"item": [
						{
							"name": "DeleteLocationV1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}",
										"type": "text"
									},
									{
										"key": "X-Authenticated-User-token",
										"value": "{{keycloak_access_token}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": "{{host}}/api/data/v1/location/delete/{{location_id}}",
								"description": "This API is associated with deleting the location data based on the location id.\n   - The endpoint for **Search location** is `/data/v1/location/delete`\n   - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "DataSyncAPIs",
			"item": [
				{
					"name": "DataSyncV1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonResponse = pm.response.json();",
									"",
									"// Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type header is present\", () => {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"pm.test(\"Test data type of the response and keys\", () => {",
									"    pm.expect(jsonResponse).to.be.an(\"object\").that.has.all.keys(",
									"        'id', 'ver', 'ts', 'params', 'responseCode', 'result'",
									"    );",
									"",
									"    pm.expect(jsonResponse.id).to.be.a(\"string\");",
									"    pm.expect(jsonResponse.ver).to.be.a(\"string\");",
									"    pm.expect(jsonResponse.ts).to.be.a(\"string\");",
									"    pm.expect(jsonResponse.responseCode).to.be.a(\"string\");",
									"",
									"    pm.expect(jsonResponse.params).to.be.an(\"object\").that.has.all.keys(",
									"        'resmsgid', 'msgid', 'err', 'status', 'errmsg'",
									"    );",
									"",
									"    pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");",
									"    pm.expect(jsonResponse.params.msgid).to.be.a(\"string\");",
									"    pm.expect(jsonResponse.params.err).to.be.null;",
									"    pm.expect(jsonResponse.params.status).to.be.a(\"string\");",
									"    pm.expect(jsonResponse.params.errmsg).to.be.null;",
									"",
									"    pm.expect(jsonResponse.result).to.be.an(\"object\").that.has.all.keys(",
									"        'response'",
									"    );",
									"",
									"    pm.expect(jsonResponse.result.response).to.eql(\"SUCCESS\");",
									"});",
									"",
									"// Validation",
									"pm.test(\"id should be api.data.sync\", function () {",
									"    pm.expect(jsonResponse.id).to.eql(\"api.data.sync\");",
									"});",
									"",
									"pm.test(\"ver should be v1\", function () {",
									"    pm.expect(jsonResponse.ver).to.eql(\"v1\");",
									"});",
									"",
									"pm.test(\"params.status should be SUCCESS\", function () {",
									"    pm.expect(jsonResponse.params.status).to.eql(\"SUCCESS\");",
									"});",
									"",
									"pm.test(\"responseCode should be OK\", function () {",
									"    pm.expect(jsonResponse.responseCode).to.eql(\"OK\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{kong_api_key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": {\n        \"operationFor\": \"ES\",\n        \"objectIds\": [\n            \"{{org_id}}\"\n        ],\n        \"objectType\": \"organisation\"\n    }\n}"
						},
						"url": "{{host}}/api/data/v1/index/sync"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "ConsentAPIs",
			"item": [
				{
					"name": "UserConsentReadV1",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{kong_api_key}}",
								"type": "text",
								"description": "Timestamp at which given API request is sent."
							},
							{
								"key": "X-Authenticated-User-token",
								"value": "{{keycloak_access_token}}",
								"type": "text",
								"description": "This ID uniquely identifies a request if the same API is executed multiple times."
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"description": "(Required) It is a unique token/key to authenticate the user each time an API is called. For corresponding sessions this token is used, not your actual username/password"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": {\n        \"consent\": {\n            \"filters\": {\n                \"userId\": \"{{user_id}}\",\n                \"consumerId\": \"{{org_id}}\",\n                \"objectId\": \"{{course_id}}\"\n            }\n        }\n    }\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": "{{host}}/api/user/v1/consent/read"
					},
					"response": []
				},
				{
					"name": "ConsentUpdateV1",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{kong_api_key}}",
								"type": "text",
								"description": "Timestamp at which given API request is sent."
							},
							{
								"key": "X-Authenticated-User-token",
								"value": "{{keycloak_access_token}}",
								"type": "text",
								"description": "This ID uniquely identifies a request if the same API is executed multiple times."
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"description": "(Required) It is a unique token/key to authenticate the user each time an API is called. For corresponding sessions this token is used, not your actual username/password"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": {\n        \"consent\": {\n            \"status\": \"ACTIVE\",\n            \"userId\": \"{{user_id}}\",\n            \"consumerId\": \"{{org_id}}\",\n            \"objectId\": \"{{course_id}}\",\n            \"objectType\": \"Collection\"\n        }\n    }\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": "{{host}}/api/user/v1/consent/update",
						"description": "This API is used to update user consent for sharing the PII to an organisation, course or collection\n   - The endpoint for **Update Consent** is `/user/v1/consent/update`  \n   - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "OtpAPIs",
			"item": [
				{
					"name": "GenerateOTPV1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonResponse = pm.response.json();",
									"",
									"// Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type header is present\", () => {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"pm.test(\"Test data type of the response and keys\", () => {",
									"    pm.expect(jsonResponse).to.be.an(\"object\").that.has.all.keys(",
									"        'id', 'ver', 'ts', 'params', 'responseCode', 'result'",
									"    );",
									"",
									"    pm.expect(jsonResponse.id).to.be.a(\"string\");",
									"    pm.expect(jsonResponse.ver).to.be.a(\"string\");",
									"    pm.expect(jsonResponse.ts).to.be.a(\"string\");",
									"    pm.expect(jsonResponse.responseCode).to.be.a(\"string\");",
									"",
									"    pm.expect(jsonResponse.params).to.be.an(\"object\").that.has.all.keys(",
									"        'resmsgid', 'msgid', 'err', 'status', 'errmsg'",
									"    );",
									"",
									"    pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");",
									"    pm.expect(jsonResponse.params.msgid).to.be.a(\"string\");",
									"    pm.expect(jsonResponse.params.err).to.be.null;",
									"    pm.expect(jsonResponse.params.status).to.be.a(\"string\");",
									"    pm.expect(jsonResponse.params.errmsg).to.be.null;",
									"",
									"    pm.expect(jsonResponse.result).to.be.an(\"object\").that.has.all.keys(",
									"        'response'",
									"    );",
									"",
									"    pm.expect(jsonResponse.result.response).to.eql(\"SUCCESS\");",
									"});",
									"",
									"// Validation",
									"pm.test(\"id should be api.otp.generate\", function () {",
									"    pm.expect(jsonResponse.id).to.eql(\"api.otp.generate\");",
									"});",
									"",
									"pm.test(\"ver should be v1\", function () {",
									"    pm.expect(jsonResponse.ver).to.eql(\"v1\");",
									"});",
									"",
									"pm.test(\"params.status should be SUCCESS\", function () {",
									"    pm.expect(jsonResponse.params.status).to.eql(\"SUCCESS\");",
									"});",
									"",
									"pm.test(\"responseCode should be OK\", function () {",
									"    pm.expect(jsonResponse.responseCode).to.eql(\"OK\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{kong_api_key}}",
								"type": "text"
							},
							{
								"key": "X-Authenticated-User-token",
								"value": "{{keycloak_access_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"request\": {\n    \"userId\": \"{{user_id}}\",\n    \"key\": \"{{random_email}}\",\n    \"type\": \"email\"\n  }\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": "{{host}}/api/otp/v1/generate",
						"description": "This API is associated with sending OTP to user on the Sunbird Platform.\n   - The endpoint for **Generate OTP** is `otp/v1/generate`\n   - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
					},
					"response": []
				},
				{
					"name": "VerifyOTPV1",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"request\": {\n    \"key\": \"{{email_id}}\",\n    \"otp\": \"\",\n    \"type\": \"email\",\n    \"userId\": \"{{user_id}}\"\n  }\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": "{{host}}/api/otp/v1/verify",
						"description": "This API is associated with verifying the OTP of the user on the Sunbird Platform.\n   - The endpoint for **Verifiy OTP** is `otp/v1/verify`\n   - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.\n   - The Otp provided in the request is verified with the available otp generated for the user within the sunbird system."
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "TenantPreferenceAPIs",
			"item": [
				{
					"name": "TenantPreferenceCreate",
					"item": [
						{
							"name": "TenantPreferenceCreateV2",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}",
										"type": "text"
									},
									{
										"key": "X-Authenticated-User-token",
										"value": "{{keycloak_access_token}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"orgId\": \"all\",\n        \"key\": \"{{random_code}}\",\n        \"data\": {\n            \"privateFields\": [\n                \"35@yopmail.com\"\n            ]\n            }\n    }\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{host}}/api/org/v2/preferences/create",
								"description": "This API is used to save data as per the tenant preference for an organisation\n   - The endpoint for **Update Consent** is `/org/v2/preferences/create`  \n   - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
							},
							"response": []
						}
					]
				},
				{
					"name": "TenantPreferenceRead",
					"item": [
						{
							"name": "TenantPreferenceReadV2",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}",
										"type": "text",
										"description": "Timestamp at which given API request is sent."
									},
									{
										"key": "X-Authenticated-User-token",
										"value": "{{keycloak_access_token}}",
										"type": "text",
										"description": "This ID uniquely identifies a request if the same API is executed multiple times."
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text",
										"description": "(Required) It is a unique token/key to authenticate the user each time an API is called. For corresponding sessions this token is used, not your actual username/password"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"request\": {\n    \"orgId\": \"all\",\n    \"key\": \"selfdeclarations\"\n  }\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{host}}/api/org/v2/preferences/read",
								"description": "This API is used to get data that is saved as tenant preference for an organisation\n   - The endpoint for **Update Consent** is `/org/v2/preferences/read`  \n   - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
							},
							"response": []
						}
					]
				},
				{
					"name": "TenantPreferenceUpdate",
					"item": [
						{
							"name": "TenantPreferenceUpdate V2",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}",
										"type": "text",
										"description": "Timestamp at which given API request is sent."
									},
									{
										"key": "X-Authenticated-User-token",
										"value": "{{keycloak_access_token}}",
										"type": "text",
										"description": "This ID uniquely identifies a request if the same API is executed multiple times."
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text",
										"description": "(Required) It is a unique token/key to authenticate the user each time an API is called. For corresponding sessions this token is used, not your actual username/password"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"orgId\": \"all\",\n        \"key\": \"selfdeclarations\",\n        \"data\": {\n            \"privateFields\": [\n                \"tn20@yopmail.com\"\n            ]\n    }\n  }\n}\n",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{host}}/api/org/v2/preferences/update",
								"description": "This API is used to update data as per the tenant preference for an organisation\n   - The endpoint for **Update Consent** is `/org/v2/preferences/update`  \n   - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "SystemSettingsAPIs",
			"item": [
				{
					"name": "SystemSettingsSetV1",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{kong_api_key}}",
								"type": "text"
							},
							{
								"key": "X-Authenticated-User-token",
								"value": "{{keycloak_access_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": {\n        \"id\": \"userTnc\",\n        \"field\": \"userTnc\",\n        \"value\": \"{\\\"latestVersion\\\":\\\"3.5.0\\\"}\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{host}}/api/data/v1/system/settings/set"
					},
					"response": []
				},
				{
					"name": "SystemSettingsGetV1",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{kong_api_key}}",
								"type": "text"
							},
							{
								"key": "X-Authenticated-User-token",
								"value": "{{keycloak_access_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": "{{host}}/api/data/v1/system/settings/get/userProfileConfig"
					},
					"response": []
				},
				{
					"name": "SystemSettingsListV1",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{kong_api_key}}",
								"type": "text"
							},
							{
								"key": "X-Authenticated-User-token",
								"value": "{{keycloak_access_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": "{{host}}/api/data/v1/system/settings/list"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "BulkUploadAPIs",
			"item": [
				{
					"name": "BulkUploadGetStatusV1",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{kong_api_key}}",
								"type": "text",
								"description": "**Accept** relates to content-Type such as **\"MIME\"**, Its used in response body for executing different multi purpose operations.Therefore, its important that the server is correctly set up, so that the MIME types transmitted are recognised and correct to determine what action to do when a resource is fetched."
							},
							{
								"key": "X-Authenticated-User-token",
								"value": "{{keycloak_access_token}}",
								"type": "text",
								"description": "The Content Type entity is the media type of the resource.Possible media types can be:- \n\n  - Application/json\n\n  - Multipart/form-data\n\n  - Application/x-www-form-urlencoded"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"description": "All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API."
							}
						],
						"url": {
							"raw": "{{host}}/api/v1/upload/status/:Job_Id",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"upload",
								"status",
								":Job_Id"
							],
							"variable": [
								{
									"key": "Job_Id",
									"value": "01233701572763648024"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "BulkOrgUploadV1",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{kong_api_key}}",
								"type": "text"
							},
							{
								"key": "x-authenticated-user-token",
								"value": "{{keycloak_access_token}}",
								"type": "text"
							},
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "org",
									"description": "This is a .csv file.\n\n  - Each line of the file is a data record. Each record consists of one or more fields, separated by commas.\n\n  \n\nThis format of this file is as :\n\n  - orgName,\n\n  - isRootOrg,\n\n  - channel,\n\n  - externalId,\n\n  - provider,\n\n  - description,\n\n  - homeUrl,\n\n  - orgCode,\n\n  - orgType,\n\n  - preferredLanguage,\n\n  - theme,\n\n  - contactDetail",
									"type": "file",
									"src": []
								}
							]
						},
						"url": "{{host}}/api/org/v1/upload"
					},
					"response": []
				},
				{
					"name": "BulkUserUploadV1",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{kong_api_key}}",
								"type": "text",
								"description": "All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API."
							},
							{
								"key": "X-Authenticated-User-token",
								"value": "{{keycloak_access_token}}",
								"type": "text"
							},
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "organisationId",
									"value": "{{org_id}}",
									"description": "The Id identifies an Organisation uniquely. This Id is provided at the time of organisational registration"
								},
								{
									"key": "user",
									"description": "This is a .csv file.\n\n  - Each line of the file is a data record. Each record consists of one or more fields, separated by commas.\n\n  \n\nThis format of this file is as :\n\n  - firstName,\n\n  - lastName,\n\n  - phone,\n\n  - email,\n\n  - userName,\n\n  - password,\n\n  - phoneVerified, \n\n  - roles,\n\n  - position,\n\n  - grade,\n\n  - location,\n\n  - dob,\n\n  - gender,\n\n  - language,\n\n  - profileSummary,\n\n  - subject,'",
									"type": "file",
									"src": []
								}
							]
						},
						"url": "{{host}}/api/v1/bulk/user/upload"
					},
					"response": []
				}
			]
		},
		{
			"name": "NotificationAPIs",
			"item": [
				{
					"name": "Notification Email V1",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{kong_api_key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": {\n        \"mode\": \"email\",\n        \"body\": \"hi this is the body\",\n        \"TraningName\": \"Test-Course-Cert\",\n        \"fromEmail\": \"support@diksha-ncte.freshdesk.com\",\n        \"orgName\": \"Test-NCERT\",\n        \"orgImageUrl\": \"https://diksha.gov.in/ncert/logoLandingPage.png\",\n        \"emailTemplateType\": \"courseCertTemp\",\n        \"subject\": \"Testing - The Constitution Quiz Participation Certificate\",\n        \"recipientUserIds\": [\n            \"{{user_id}}\"\n        ]\n    }\n}"
						},
						"url": "{{host}}/api/user/v1/notification/email"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "UserFeedAPIs",
			"item": [
				{
					"name": "Create-Feed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response JSON body",
									"let jsonResponse = pm.response.json();",
									"",
									"// Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type header is present\", () => {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"// Validation",
									"pm.test(\"Validate specific field values\", function () {",
									"    pm.expect(jsonResponse.id).to.eql(\"api.user.feed.create\");",
									"    pm.expect(jsonResponse.ver).to.eql(\"v1\");",
									"    pm.expect(jsonResponse.responseCode).to.eql(\"OK\");",
									"",
									"    // Additional validation can be added if needed",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"connection": true,
							"accept-encoding": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{kong_api_key}}",
								"type": "text"
							},
							{
								"key": "X-Authenticated-User-Token",
								"value": "{{keycloak_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": {\n        \"userId\": \"{{user_id}}\",\n        \"category\": \"user-feed\",\n        \"priority\": 1,\n        \"data\": {\n            \"dataValue\": \"yes\"\n        }\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{host}}/api/user/v1/feed/create",
						"description": "Creates feed for the user."
					},
					"response": [
						{
							"name": "Create-Feed",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}",
										"type": "text"
									},
									{
										"key": "X-Authenticated-User-Token",
										"value": "{{keycloak_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"userId\": \"155ce3c5-713e-4749-bc1c-95d09c640914\",\n        \"category\": \"user-feed\",\n        \"priority\": 1,\n        \"data\": {\n            \"dataValue\": \"yes\"\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{host}}/api/user/v1/feed/create"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Fri, 08 Sep 2023 11:24:29 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "272"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "X-RateLimit-Limit-hour",
									"value": "30000"
								},
								{
									"key": "X-RateLimit-Remaining-hour",
									"value": "29994"
								},
								{
									"key": "referrer-policy",
									"value": "origin-when-cross-origin, strict-origin-when-cross-origin"
								},
								{
									"key": "x-frame-options",
									"value": "DENY"
								},
								{
									"key": "x-xss-protection",
									"value": "1; mode=block"
								},
								{
									"key": "x-response-length",
									"value": "22"
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff"
								},
								{
									"key": "access-control-allow-origin",
									"value": "*"
								},
								{
									"key": "x-permitted-cross-domain-policies",
									"value": "master-only"
								},
								{
									"key": "x-envoy-upstream-service-time",
									"value": "22"
								},
								{
									"key": "X-Kong-Upstream-Latency",
									"value": "24"
								},
								{
									"key": "X-Kong-Proxy-Latency",
									"value": "16"
								},
								{
									"key": "Via",
									"value": "kong/0.14.1"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": \"api.user.feed.create\",\n    \"ver\": \"v1\",\n    \"ts\": \"2023-09-08 11:24:29:371+0000\",\n    \"params\": {\n        \"resmsgid\": \"7fde6a4c77df4e19e78792a3624ab6a5\",\n        \"msgid\": \"7fde6a4c77df4e19e78792a3624ab6a5\",\n        \"err\": null,\n        \"status\": \"SUCCESS\",\n        \"errmsg\": null\n    },\n    \"responseCode\": \"OK\",\n    \"result\": {\n        \"response\": \"SUCCESS\"\n    }\n}"
						}
					]
				},
				{
					"name": "UpdateFeedV1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response JSON body",
									"let jsonResponse = pm.response.json();",
									"",
									"// Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type header is present\", () => {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"// Validation",
									"pm.test(\"Validate specific field values\", function () {",
									"    pm.expect(jsonResponse.id).to.eql(\"api.user.feed.update\");",
									"    pm.expect(jsonResponse.ver).to.eql(\"v1\");",
									"    pm.expect(jsonResponse.responseCode).to.eql(\"OK\");",
									"",
									"    // Additional validation can be added if needed",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"connection": true,
							"accept-encoding": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "{{kong_api_key}}",
								"type": "text"
							},
							{
								"key": "X-Authenticated-User-Token",
								"value": "{{keycloak_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": {\n        \"userId\": \"{{user_id}}\",\n        \"category\": \"user-feed\",\n        \"feedId\": \"{{feed_id}}\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{host}}/api/user/feed/v1/update",
						"description": "Update the user-feed"
					},
					"response": [
						{
							"name": "Update-Feed",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}",
										"type": "text"
									},
									{
										"key": "X-Authenticated-User-Token",
										"value": "{{keycloak_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"userId\": \"155ce3c5-713e-4749-bc1c-95d09c640914\",\n        \"category\": \"user-feed\",\n        \"feedId\": \"23b7b644-8fa7-4218-a19c-68f05e93e423\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{host}}/api/user/feed/v1/update"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Fri, 08 Sep 2023 11:32:39 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "272"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "X-RateLimit-Limit-hour",
									"value": "30000"
								},
								{
									"key": "X-RateLimit-Remaining-hour",
									"value": "29997"
								},
								{
									"key": "referrer-policy",
									"value": "origin-when-cross-origin, strict-origin-when-cross-origin"
								},
								{
									"key": "x-frame-options",
									"value": "DENY"
								},
								{
									"key": "x-xss-protection",
									"value": "1; mode=block"
								},
								{
									"key": "x-response-length",
									"value": "22"
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff"
								},
								{
									"key": "access-control-allow-origin",
									"value": "*"
								},
								{
									"key": "x-permitted-cross-domain-policies",
									"value": "master-only"
								},
								{
									"key": "x-envoy-upstream-service-time",
									"value": "25"
								},
								{
									"key": "X-Kong-Upstream-Latency",
									"value": "27"
								},
								{
									"key": "X-Kong-Proxy-Latency",
									"value": "16"
								},
								{
									"key": "Via",
									"value": "kong/0.14.1"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": \"api.user.feed.update\",\n    \"ver\": \"v1\",\n    \"ts\": \"2023-09-08 11:32:39:796+0000\",\n    \"params\": {\n        \"resmsgid\": \"4615224c010b6d9de925f6f3471bf105\",\n        \"msgid\": \"4615224c010b6d9de925f6f3471bf105\",\n        \"err\": null,\n        \"status\": \"SUCCESS\",\n        \"errmsg\": null\n    },\n    \"responseCode\": \"OK\",\n    \"result\": {\n        \"response\": \"SUCCESS\"\n    }\n}"
						}
					]
				},
				{
					"name": "ReadFeedV1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response JSON body",
									"let jsonResponse = pm.response.json();",
									"",
									"// Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type header is present\", () => {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"// Validation",
									"pm.test(\"Validate specific field values\", function () {",
									"    pm.expect(jsonResponse.ver).to.eql(\"v1\");",
									"    pm.expect(jsonResponse.responseCode).to.eql(\"OK\");",
									"});",
									"",
									"let userFeedId = jsonResponse.result.response.userFeed.length > 0 ? jsonResponse.result.response.userFeed[0].id : null;",
									"pm.environment.set('feed_id', userFeedId);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{kong_api_key}}",
								"type": "text"
							},
							{
								"key": "X-Authenticated-User-Token",
								"value": "{{keycloak_access_token}}",
								"type": "text"
							}
						],
						"url": "{{host}}/api/user/v1/feed/{{user_id}}",
						"description": "Get the feed details based on user-id"
					},
					"response": [
						{
							"name": "ReadFeedV1",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}",
										"type": "text"
									},
									{
										"key": "X-Authenticated-User-Token",
										"value": "{{keycloak_access_token}}",
										"type": "text"
									}
								],
								"url": "{{host}}/api/user/v1/feed/{{user_id}}"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Fri, 08 Sep 2023 11:30:06 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "X-RateLimit-Limit-hour",
									"value": "30000"
								},
								{
									"key": "X-RateLimit-Remaining-hour",
									"value": "29986"
								},
								{
									"key": "referrer-policy",
									"value": "origin-when-cross-origin, strict-origin-when-cross-origin"
								},
								{
									"key": "x-frame-options",
									"value": "DENY"
								},
								{
									"key": "x-xss-protection",
									"value": "1; mode=block"
								},
								{
									"key": "x-response-length",
									"value": "531"
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff"
								},
								{
									"key": "access-control-allow-origin",
									"value": "*"
								},
								{
									"key": "x-permitted-cross-domain-policies",
									"value": "master-only"
								},
								{
									"key": "x-envoy-upstream-service-time",
									"value": "15"
								},
								{
									"key": "X-Kong-Upstream-Latency",
									"value": "18"
								},
								{
									"key": "X-Kong-Proxy-Latency",
									"value": "10"
								},
								{
									"key": "Via",
									"value": "kong/0.14.1"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": \"api.user.feed.155ce3c5-713e-4749-bc1c-95d09c640914\",\n    \"ver\": \"v1\",\n    \"ts\": \"2023-09-08 11:30:06:795+0000\",\n    \"params\": {\n        \"resmsgid\": \"45575c8d0515fcd1852f32502e01d4d1\",\n        \"msgid\": \"45575c8d0515fcd1852f32502e01d4d1\",\n        \"err\": null,\n        \"status\": \"SUCCESS\",\n        \"errmsg\": null\n    },\n    \"responseCode\": \"OK\",\n    \"result\": {\n        \"response\": {\n            \"userFeed\": [\n                {\n                    \"id\": \"03154548-1525-4258-a6cf-3f7b62040c66\",\n                    \"userId\": \"155ce3c5-713e-4749-bc1c-95d09c640914\",\n                    \"category\": \"user-feed\",\n                    \"priority\": 1,\n                    \"createdBy\": \"155ce3c5-713e-4749-bc1c-95d09c640914\",\n                    \"status\": \"unread\",\n                    \"data\": {\n                        \"dataValue\": \"yes\"\n                    },\n                    \"createdOn\": 1694172269364\n                },\n                {\n                    \"id\": \"23b7b644-8fa7-4218-a19c-68f05e93e423\",\n                    \"userId\": \"155ce3c5-713e-4749-bc1c-95d09c640914\",\n                    \"category\": \"user-feed\",\n                    \"priority\": 1,\n                    \"createdBy\": \"155ce3c5-713e-4749-bc1c-95d09c640914\",\n                    \"status\": \"unread\",\n                    \"data\": {\n                        \"dataValue\": \"yes\"\n                    },\n                    \"createdOn\": 1694172208796\n                }\n            ]\n        }\n    }\n}"
						}
					]
				},
				{
					"name": "DeleteFeedV1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response JSON body",
									"let jsonResponse = pm.response.json();",
									"",
									"// Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type header is present\", () => {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"pm.test(\"Test data type of the response and keys\", () => {",
									"    pm.expect(jsonResponse).to.be.an(\"object\").that.has.all.keys(",
									"        'id', 'ver', 'ts', 'params', 'responseCode', 'result'",
									"    );",
									"",
									"    pm.expect(jsonResponse.id).to.be.a(\"string\");",
									"    pm.expect(jsonResponse.ver).to.be.a(\"string\");",
									"    pm.expect(jsonResponse.ts).to.be.a(\"string\");",
									"    pm.expect(jsonResponse.responseCode).to.be.a(\"string\");",
									"",
									"    pm.expect(jsonResponse.params).to.be.an(\"object\").that.has.all.keys(",
									"        'resmsgid', 'msgid', 'err', 'status', 'errmsg'",
									"    );",
									"",
									"    pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");",
									"    pm.expect(jsonResponse.params.msgid).to.be.a(\"string\");",
									"    pm.expect(jsonResponse.params.err).to.be.null;",
									"    pm.expect(jsonResponse.params.status).to.be.a(\"string\");",
									"    pm.expect(jsonResponse.params.errmsg).to.be.null;",
									"",
									"    pm.expect(jsonResponse.result).to.be.an(\"object\").that.has.all.keys(",
									"        'response'",
									"    );",
									"",
									"    pm.expect(jsonResponse.result.response).to.be.a(\"string\");",
									"});",
									"",
									"// Validation",
									"pm.test(\"id should be api.user.feed.delete\", function () {",
									"    pm.expect(jsonResponse.id).to.eql(\"api.user.feed.delete\");",
									"});",
									"",
									"pm.test(\"ver should be v1\", function () {",
									"    pm.expect(jsonResponse.ver).to.eql(\"v1\");",
									"});",
									"",
									"pm.test(\"params.status should be SUCCESS\", function () {",
									"    pm.expect(jsonResponse.params.status).to.eql(\"SUCCESS\");",
									"});",
									"",
									"pm.test(\"responseCode should be OK\", function () {",
									"    pm.expect(jsonResponse.responseCode).to.eql(\"OK\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{kong_api_key}}",
								"type": "text"
							},
							{
								"key": "X-Authenticated-User-Token",
								"value": "{{keycloak_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": {\n        \"userId\": \"{{user_id}}\",\n        \"category\": \"user-feed\",\n        \"feedId\": \"{{feed_id}}\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{host}}/api/user/feed/v1/delete",
						"description": "Delete-Feed api to delete the user-related feed based on the feed-id"
					},
					"response": [
						{
							"name": "Delete-Feed",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}",
										"type": "text"
									},
									{
										"key": "X-Authenticated-User-Token",
										"value": "{{keycloak_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"userId\": \"155ce3c5-713e-4749-bc1c-95d09c640914\",\n        \"category\": \"user-feed\",\n        \"feedId\": \"03154548-1525-4258-a6cf-3f7b62040c66\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{host}}/api/user/feed/v1/delete"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Fri, 08 Sep 2023 11:40:44 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "X-RateLimit-Limit-hour",
									"value": "30000"
								},
								{
									"key": "X-RateLimit-Remaining-hour",
									"value": "29998"
								},
								{
									"key": "referrer-policy",
									"value": "origin-when-cross-origin, strict-origin-when-cross-origin"
								},
								{
									"key": "x-frame-options",
									"value": "DENY"
								},
								{
									"key": "x-xss-protection",
									"value": "1; mode=block"
								},
								{
									"key": "x-response-length",
									"value": "22"
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff"
								},
								{
									"key": "access-control-allow-origin",
									"value": "*"
								},
								{
									"key": "x-permitted-cross-domain-policies",
									"value": "master-only"
								},
								{
									"key": "x-envoy-upstream-service-time",
									"value": "18"
								},
								{
									"key": "X-Kong-Upstream-Latency",
									"value": "20"
								},
								{
									"key": "X-Kong-Proxy-Latency",
									"value": "13"
								},
								{
									"key": "Via",
									"value": "kong/0.14.1"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": \"api.user.feed.delete\",\n    \"ver\": \"v1\",\n    \"ts\": \"2023-09-08 11:40:44:947+0000\",\n    \"params\": {\n        \"resmsgid\": \"17620fe6fe5608d1cd9caf3b3782f442\",\n        \"msgid\": \"17620fe6fe5608d1cd9caf3b3782f442\",\n        \"err\": null,\n        \"status\": \"SUCCESS\",\n        \"errmsg\": null\n    },\n    \"responseCode\": \"OK\",\n    \"result\": {\n        \"response\": \"SUCCESS\"\n    }\n}"
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"const getRandomName = () => {",
					"const firstNames = [\"Aarav\", \"Aarya\", \"Advait\", \"Aishwarya\", \"Akshay\", \"Ananya\", \"Aaradhya\", \"Ayush\", \"Deepika\", \"Ishaan\"];",
					"const lastNames = [\"Sharma\", \"Verma\", \"Singh\", \"Patel\", \"Gupta\", \"Kumar\", \"Joshi\", \"Shah\", \"Chopra\", \"Mehra\"];",
					"",
					"",
					"  const randomFirstName = firstNames[Math.floor(Math.random() * firstNames.length)];",
					"  const randomLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
					"",
					"  return { randomFirstName, randomLastName };",
					"};",
					"",
					"const generateUniqueUsername = () => {",
					"  const randomString = Math.random().toString(36).substring(2, 8);",
					"  const randomUserName = `testuser_${randomString.toLowerCase()}`;",
					"  return randomUserName;",
					"};",
					"",
					"const generateUniqueOrgname = () => {",
					"  const randomString = Math.random().toString(36).substring(2, 8);",
					"  const randomOrgName = `testorg_${randomString.toLowerCase()}`;",
					"  return randomOrgName;",
					"};",
					"",
					"const generateUniqueChannelname = () => {",
					"const randomString = Math.random().toString(36).substring(2, 8);",
					"const randomChannelName = `testchannel_${randomString.toLowerCase()}`;",
					"return randomChannelName;",
					"}",
					"",
					"const generateUniqueEmail = () => {",
					"  const randomString = Math.random().toString(36).substring(2, 8);",
					"  return `testuser_${randomString}@yopmail.com`;",
					"};",
					"",
					"const generateRandomPassword = () => {",
					"  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()-_=+[]{}|;:,.<>?';",
					"  let password = '';",
					"  ",
					"  let hasUpperCase = false;",
					"  let hasLowerCase = false;",
					"  let hasNumber = false;",
					"  let hasSpecialChar = false;",
					"",
					"  while (password.length < 8 || !hasUpperCase || !hasLowerCase || !hasNumber || !hasSpecialChar) {",
					"    password = '';",
					"    for (let i = 0; i < 8; i++) {",
					"      password += chars.charAt(Math.floor(Math.random() * chars.length));",
					"    }",
					"",
					"    hasUpperCase = /[A-Z]/.test(password);",
					"    hasLowerCase = /[a-z]/.test(password);",
					"    hasNumber = /[0-9]/.test(password);",
					"    hasSpecialChar = /[!@#$%^&*()-_=+[]{}|;:,.<>?]/.test(password);",
					"  }",
					"  return password;",
					"};",
					"",
					"const generateRandomCode = () => {",
					"  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';",
					"  let code = '';",
					"  for (let i = 0; i < 6; i++) {",
					"    code += chars.charAt(Math.floor(Math.random() * chars.length));",
					"  }",
					"  return code;",
					"};",
					"",
					"const generateRandomLocationName = () => {",
					"  const firstNames = [\"Andhra\", \"Telangana\", \"Karnataka\", \"Tamil Nadu\", \"Kerala\", \"Maharashtra\", \"Gujarat\", \"Rajasthan\", \"Uttar Pradesh\", \"Madhya Pradesh\"];",
					"  const lastNames = [\"State\", \"Region\", \"Province\", \"Territory\", \"District\", \"Zone\", \"Area\"];",
					"",
					"  const randomFirstName = firstNames[Math.floor(Math.random() * firstNames.length)];",
					"  const randomLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
					"",
					"  // Add a timestamp to make the name more unique",
					"  const timestamp = new Date().getTime();",
					"",
					"  return `${randomFirstName}_${randomLastName}_${timestamp}`;",
					"};",
					"",
					"",
					"const isCodeUsed = (code) => {",
					"  const usedCodes = pm.environment.get(\"used_codes\") || [];",
					"  return usedCodes.includes(code);",
					"};",
					"",
					"const isLocationNameUsed = (locationName) => {",
					"  const usedLocationNames = pm.environment.get(\"used_location_names\") || [];",
					"  return usedLocationNames.includes(locationName);",
					"};",
					"",
					"const generateUniqueCode = () => {",
					"  let code = generateRandomCode();",
					"  while (isCodeUsed(code)) {",
					"    code = generateRandomCode();",
					"  }",
					"  return code;",
					"};",
					"",
					"const generateUniqueLocationName = () => {",
					"  let locationName = generateRandomLocationName();",
					"  while (isLocationNameUsed(locationName)) {",
					"    locationName = generateRandomLocationName();",
					"  }",
					"  return locationName;",
					"};",
					"// Initialize environment variables as empty arrays if they don't exist",
					"const initializeArrayVariable = (variableName) => {",
					"  if (!pm.environment.get(variableName)) {",
					"    pm.environment.set(variableName, JSON.stringify([]));",
					"  }",
					"};",
					"",
					"initializeArrayVariable(\"used_user_names\");",
					"initializeArrayVariable(\"used_org_names\");",
					"initializeArrayVariable(\"used_channel_names\");",
					"initializeArrayVariable(\"used_emails\");",
					"initializeArrayVariable(\"used_codes\");",
					"initializeArrayVariable(\"used_location_names\");",
					"// Function to safely parse a comma-separated list as an array",
					"const safeParseCommaSeparatedList = (variableName) => {",
					"  try {",
					"    const commaSeparatedStr = pm.environment.get(variableName);",
					"    if (typeof commaSeparatedStr === 'string' && commaSeparatedStr.trim() !== '') {",
					"      // Split the comma-separated string into an array",
					"      return commaSeparatedStr.split(\",\");",
					"    }",
					"  } catch (error) {",
					"    console.error(`Error parsing ${variableName}: ${error}`);",
					"  }",
					"  return [];",
					"};",
					"",
					"// Initialize or retrieve environment variables",
					"let usedUsernames = safeParseCommaSeparatedList(\"used_user_names\");",
					"let usedOrgnames = safeParseCommaSeparatedList(\"used_org_names\");",
					"let usedChannelnames = safeParseCommaSeparatedList(\"used_channel_names\");",
					"let usedEmails = safeParseCommaSeparatedList(\"used_emails\");",
					"let usedCodes = safeParseCommaSeparatedList(\"used_codes\");",
					"let usedLocationNames = safeParseCommaSeparatedList(\"used_location_names\");",
					"",
					"",
					"",
					"// Function to generate a random 10-digit Indian phone number",
					"function generateRandomPhoneNumber() {",
					"  var phoneNumber = \"9\"; // Start with 9 (common for Indian mobile numbers)",
					"  for (var i = 1; i < 10; i++) {",
					"    phoneNumber += Math.floor(Math.random() * 10);",
					"  }",
					"  return phoneNumber;",
					"}",
					"",
					"// Check if the used phone numbers array exists in environment variables",
					"if (!pm.environment.get(\"used_phone_numbers\")) {",
					"  pm.environment.set(\"used_phone_numbers\", JSON.stringify([]));",
					"}",
					"",
					"// Retrieve the used phone numbers array",
					"var usedPhoneNumbers = JSON.parse(pm.environment.get(\"used_phone_numbers\"));",
					"",
					"// Generate a new random phone number and ensure it's not a duplicate",
					"var newPhoneNumber;",
					"do {",
					"  newPhoneNumber = generateRandomPhoneNumber();",
					"} while (usedPhoneNumbers.includes(newPhoneNumber));",
					"",
					"// Store the new phone number in the used numbers array",
					"usedPhoneNumbers.push(newPhoneNumber);",
					"",
					"// Update the environment variable with the updated used phone numbers array",
					"pm.environment.set(\"used_phone_numbers\", JSON.stringify(usedPhoneNumbers));",
					"// Set the generated phone number as a variable for the request",
					"pm.variables.set(\"random_phone_number\", newPhoneNumber);",
					"",
					"let randomName = getRandomName();",
					"let randomUserName = generateUniqueUsername();",
					"let randomOrgName = generateUniqueOrgname();",
					"let randomChannelName = generateUniqueChannelname();",
					"let randomEmail = generateUniqueEmail();",
					"let randomCode = generateUniqueCode();",
					"let randomLocationName = generateUniqueLocationName();",
					"",
					"// Ensure the username and email are unique",
					"while (usedUsernames.includes(randomUserName)) {",
					"  randomUserName = generateUniqueUsername();",
					"}",
					"",
					"while (usedOrgnames.includes(randomOrgName)) {",
					"  randomOrgName = generateUniqueOrgname();",
					"}",
					"",
					"while (usedChannelnames.includes(randomChannelName)) {",
					"  randomChannelName = generateUniqueChannelname();",
					"}",
					"",
					"while (usedEmails.includes(randomEmail)) {",
					"  randomEmail = generateUniqueEmail();",
					"}",
					"",
					"while (usedCodes.includes(randomCode)) {",
					"  randomCode = generateUniqueCode();",
					"}",
					"",
					"while (usedLocationNames.includes(randomLocationName)) {",
					"  randomLocationName = generateUniqueLocationName();",
					"}",
					"",
					"usedUsernames.push(randomUserName);",
					"usedEmails.push(randomEmail);",
					"usedCodes.push(randomCode);",
					"usedLocationNames.push(randomLocationName);",
					"",
					"const randomPassword = generateRandomPassword();",
					"// Update environment variables",
					"pm.environment.set(\"random_first_name\", randomName.randomFirstName);",
					"pm.environment.set(\"random_last_name\", randomName.randomLastName);",
					"pm.environment.set(\"random_user_name\", randomUserName);",
					"pm.environment.set(\"random_org_name\",randomOrgName);",
					"pm.environment.set(\"random_channel_name\",randomChannelName);",
					"pm.environment.set(\"random_email\", randomEmail);",
					"pm.environment.set(\"random_password\", randomPassword);",
					"pm.environment.set(\"random_code\", randomCode);",
					"pm.environment.set(\"random_location_name\", randomLocationName);",
					"pm.environment.set(\"used_user_names\", usedUsernames);",
					"pm.environment.set(\"used_emails\", usedEmails);",
					"pm.environment.set(\"used_channel_names\",usedChannelnames);",
					"pm.environment.set(\"used_org_names\",usedOrgnames);",
					"pm.environment.set(\"used_codes\", usedCodes);",
					"pm.environment.set(\"used_location_names\", usedLocationNames);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "refresh_token",
			"value": ""
		}
	]
}