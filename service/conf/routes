# Routes
# This file defines all application routes (Higher priority routes first)
OPTIONS    /*all                        @controllers.LearnerController.preflight(all)

# Health Check APIs
GET  /health                                  @controllers.healthmanager.HealthController.getHealth()
GET  /:service/health                      @controllers.healthmanager.HealthController.getLearnerServiceHealth(service:String)

# Sync API
POST /v1/data/sync                          @controllers.search.SearchController.sync()

# Cache APIs
DELETE /v1/cache/clear/:mapName @controllers.cache.CacheController.clearCache(mapName:String)

# Course Management APIs
GET      /v1/user/courses/list/:uid	    @controllers.courseenrollment.CourseEnrollmentController.getEnrolledCourses(uid:String)
POST     /v1/user/courses/read				@controllers.courseenrollment.CourseEnrollmentController.getEnrolledCourse()
POST     /v1/course/enroll	    		@controllers.courseenrollment.CourseEnrollmentController.enrollCourse()
POST     /v1/course/unenroll             @controllers.courseenrollment.CourseEnrollmentController.unenrollCourse()
POST /v1/batch/bulk/enrollment          @controllers.bulkapimanagement.BulkUploadController.batchEnrollmentBulkUpload()
POST /v1/batch/bulk/unenrollment          @controllers.bulkapimanagement.BulkUploadController.batchUnEnrollmentBulkUpload()
POST     /v1/content/state/read	        @controllers.LearnerController.getContentState()
PATCH    /v1/user/content/state     	@controllers.LearnerController.updateContentState()
PATCH    /v1/content/state/update     	@controllers.LearnerController.updateContentState()

# Upload Job Management APIs - Check with Krisha  - TODO
GET  /v1/upload/status/:pid             @controllers.bulkapimanagement.BulkUploadController.getUploadStatus(pid:String)
GET  /v1/upload/statusDownloadLink/:pid @controllers.bulkapimanagement.BulkUploadController.getStatusDownloadLink(pid:String)

# Badging Content - Should move to content-service - TODO
POST   /v1/content/link                       @controllers.badging.BadgeAssociationController.createAssociation()
POST   /v1/content/unlink                     @controllers.badging.BadgeAssociationController.removeAssociation()
POST   /v1/content/link/search 		              @controllers.badging.BadgeAssociationController.searchAssociation()

# Page Management APIs
POST	/v1/page/create				  @controllers.pagemanagement.PageController.createPage()
PATCH	/v1/page/update				  @controllers.pagemanagement.PageController.updatePage()
GET	    /v1/page/read/:pageId    		  @controllers.pagemanagement.PageController.getPageSetting(pageId:String)
GET	    /v1/page/all/settings			  @controllers.pagemanagement.PageController.getPageSettings()
POST     /v1/page/assemble		  @controllers.pagemanagement.PageController.getPageData()

# Page Section Management APIs
POST	/v1/page/section/create				  @controllers.pagemanagement.PageController.createPageSection()
PATCH	/v1/page/section/update				  @controllers.pagemanagement.PageController.updatePageSection()
GET	    /v1/page/section/list			@controllers.pagemanagement.PageController.getSections()
GET     /v1/page/section/read/:sectionId		      @controllers.pagemanagement.PageController.getSection(sectionId:String)

# Course Batch APIs
POST     /v1/course/batch/create				@controllers.coursemanagement.CourseBatchController.createBatch()
PATCH 	 /v1/course/batch/update				@controllers.coursemanagement.CourseBatchController.updateBatch()
GET		 /v1/course/batch/read/:batchId			@controllers.coursemanagement.CourseBatchController.getBatch(batchId:String)
POST     /v1/course/batch/search                @controllers.coursemanagement.CourseBatchController.search()
POST	 /v1/course/batch/users/add/:batchId			@controllers.coursemanagement.CourseBatchController.addUserToCourseBatch(batchId:String)
POST	 /v1/course/batch/users/remove/:batchId			@controllers.coursemanagement.CourseBatchController.removeUserFromCourseBatch(batchId:String)
POST		 /v1/batch/participants/list			@controllers.coursemanagement.CourseBatchController.getParticipants()

#metrics APIs for dashboard
GET  /v1/dashboard/progress/course/:batchId      @controllers.metrics.CourseMetricsController.courseProgress(batchId:String)
GET  /v2/dashboard/progress/course/:batchId      @controllers.metrics.CourseMetricsController.courseProgressV2(batchId:String)
GET  /v1/dashboard/consumption/course/:courseId   @controllers.metrics.CourseMetricsController.courseCreation(courseId:String)
GET  /v1/dashboard/progress/course/:courseId/export      @controllers.metrics.CourseMetricsController.courseProgressReport(courseId:String)

# Textbook APIs
POST    /v1/textbook/toc/upload/:textbookId           @controllers.textbook.TextbookController.uploadTOC(textbookId:String)
GET    /v1/textbook/toc/download/:textbookId           @controllers.textbook.TextbookController.getTocUrl(textbookId:String)

