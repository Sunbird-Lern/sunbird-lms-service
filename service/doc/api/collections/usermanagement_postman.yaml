swagger: '2.0'
info:
  version: '1.0'
  title: user management api
  description: 'TODO: Add Description'
  license:
    name: MIT
    url: http://github.com/gruntjs/grunt/blob/master/LICENSE-MIT
host: example.com
basePath: /
securityDefinitions:
  auth:
    type: oauth2
    flow: implicit
    authorizationUrl: http://example.com
    scopes: {}
    x-skip-client-authentication: false
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /v1/user/logout:
    post:
      description: Logout api
      summary: '{{host}}/v1/user/logout'
      operationId: V1UserLogoutPost
      produces:
      - application/json
      parameters:
      - name: Body
        in: body
        required: true
        description: ''
        schema:
          $ref: '#/definitions/{{host}}~1v1~1user~1logoutrequest'
      - name: Content-Type
        in: header
        required: true
        type: string
        description: ''
      - name: X-Consumer-ID
        in: header
        required: true
        type: string
        description: ''
      - name: ts
        in: header
        required: true
        type: string
        description: ''
      - name: X-msgid
        in: header
        required: true
        type: string
        description: ''
      - name: Authorization
        in: header
        required: true
        type: string
        description: ''
      - name: x-authenticated-user-token
        in: header
        required: true
        type: string
        description: ''
      responses:
        200:
          description: ''
      security:
      - auth: []
      x-unitTests:
      - request:
          method: POST
          uri: /v1/user/logout
          headers:
            Content-Type: application/json
            X-Consumer-ID: X-Consumer-ID
            ts: 2017-05-25 10:18:56:578+0530
            X-msgid: 8e27cbf5-e299-43b0-bca7-8347f7e5abcf
            Authorization: Bearer {{api-key}}
            x-authenticated-user-token: '{{user-token}}'
          body: >-
            {



              "params": {

                       },

                "request":{ }

            }
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: '{{host}}/v1/user/logout'
        x-testDescription: Logout api
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /v1/user/update:
    patch:
      description: update user
      summary: update user info
      operationId: V1UserUpdatePatch
      produces:
      - application/json
      parameters:
      - name: Body
        in: body
        required: true
        description: ''
        schema:
          $ref: '#/definitions/UpdateUserInforequest'
      - name: Content-Type
        in: header
        required: true
        type: string
        description: ''
      - name: X-Consumer-ID
        in: header
        required: true
        type: string
        description: ''
      - name: ts
        in: header
        required: true
        type: string
        description: ''
      - name: X-msgid
        in: header
        required: true
        type: string
        description: ''
      - name: Authorization
        in: header
        required: true
        type: string
        description: ''
      - name: x-authenticated-user-token
        in: header
        required: true
        type: string
        description: ''
      responses:
        200:
          description: ''
      security:
      - auth: []
      x-unitTests:
      - request:
          method: PATCH
          uri: /v1/user/update
          headers:
            Content-Type: application/json
            X-Consumer-ID: X-Consumer-ID
            ts: 2017-05-25 10:18:56:578+0530
            X-msgid: 8e27cbf5-e299-43b0-bca7-8347f7e5abcf
            Authorization: Bearer {{api-key}}
            x-authenticated-user-token: '{{user-token}}'
          body: '{  "id": "5ea900cf-3885-4ab5-b126-77b2074db562",  "ts": "2017-09-19 12:22:09:874+0530",  "params": {},  "request": {"profileSummary": "Test to check for update","userId": "userId","lastname":"manzarul"   }}'
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: update user info
        x-testDescription: update user
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /org/v1/role/assign:
    post:
      description: ''
      summary: '{{host}}/user/v1/role/assign'
      operationId: OrgV1RoleAssignPost
      produces:
      - application/json
      parameters:
      - name: Body
        in: body
        required: true
        description: ''
        schema:
          $ref: '#/definitions/{{host}}~1user~1v1~1role~1assignrequest'
      - name: Content-Type
        in: header
        required: true
        type: string
        description: ''
      - name: X-Consumer-ID
        in: header
        required: true
        type: string
        description: ''
      - name: ts
        in: header
        required: true
        type: string
        description: ''
      - name: X-msgid
        in: header
        required: true
        type: string
        description: ''
      - name: Authorization
        in: header
        required: true
        type: string
        description: ''
      - name: x-authenticated-user-token
        in: header
        required: true
        type: string
        description: ''
      responses:
        200:
          description: ''
      security:
      - auth: []
      x-unitTests:
      - request:
          method: POST
          uri: /org/v1/role/assign
          headers:
            Content-Type: application/json
            X-Consumer-ID: X-Consumer-ID
            ts: 2017-05-25 10:18:56:578+0530
            X-msgid: 8e27cbf5-e299-43b0-bca7-8347f7e5abcf
            Authorization: Bearer {{api-key}}
            x-authenticated-user-token: '{{user-token}}'
          body: '{"request":{"userId":"userId","organisationId":"orgId","roles":["CONTENT_CREATION","PUBLIC","CONTENT_CREATOR","ANNOUNCEMENT_SENDER"]}}'
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: '{{host}}/user/v1/role/assign'
        x-testDescription: ''
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /v1/user/login:
    post:
      description: User login api
      summary: '{{host}}/v1/user/login'
      operationId: V1UserLoginPost
      produces:
      - application/json
      parameters:
      - name: Body
        in: body
        required: true
        description: ''
        schema:
          $ref: '#/definitions/{{host}}~1v1~1user~1logoutrequest'
      - name: Content-Type
        in: header
        required: true
        type: string
        description: ''
      - name: X-Consumer-ID
        in: header
        required: true
        type: string
        description: ''
      - name: ts
        in: header
        required: true
        type: string
        description: ''
      - name: X-msgid
        in: header
        required: true
        type: string
        description: ''
      - name: Authorization
        in: header
        required: true
        type: string
        description: ''
      responses:
        200:
          description: ''
      security:
      - auth: []
      x-unitTests:
      - request:
          method: POST
          uri: /v1/user/login
          headers:
            Content-Type: application/json
            X-Consumer-ID: X-Consumer-ID
            ts: 2017-05-25 10:18:56:578+0530
            X-msgid: 8e27cbf5-e299-43b0-bca7-8347f7e5abcf
            Authorization: Bearer {{api-key}}
          body: "\r\n{\r\n \"params\": { },\r\n    \"request\":{                 \r\n      \"userName\":\"manzarul1.haque@taren.com\",\r\n      \"source\":\"web\",\r\n      \"password\":\"password\"\r\n    }     \r\n}    \r\n"
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: '{{host}}/v1/user/login'
        x-testDescription: User login api
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /v1/user/forgotpassword:
    post:
      description: Forgot password api.
      summary: '{{host}}/v1/user/forgotpassword'
      operationId: V1UserForgotpasswordPost
      produces:
      - application/json
      parameters:
      - name: Body
        in: body
        required: true
        description: ''
        schema:
          $ref: '#/definitions/{{host}}~1v1~1user~1forgotpasswordrequest'
      - name: Content-Type
        in: header
        required: true
        type: string
        description: ''
      - name: X-Consumer-ID
        in: header
        required: true
        type: string
        description: ''
      - name: ts
        in: header
        required: true
        type: string
        description: ''
      - name: X-msgid
        in: header
        required: true
        type: string
        description: ''
      - name: Authorization
        in: header
        required: true
        type: string
        description: ''
      - name: x-authenticated-user-token
        in: header
        required: true
        type: string
        description: ''
      responses:
        200:
          description: ''
      security:
      - auth: []
      x-unitTests:
      - request:
          method: POST
          uri: /v1/user/forgotpassword
          headers:
            Content-Type: application/json
            X-Consumer-ID: X-Consumer-ID
            ts: 2017-05-25 10:18:56:578+0530
            X-msgid: 8e27cbf5-e299-43b0-bca7-8347f7e5abcf
            Authorization: Bearer {{api-key}}
            x-authenticated-user-token: '{{user-token}}'
          body: " {\r\n\"id\":\"unique API ID\",\r\n\"ts\":\"2013/10/15 16:16:39\",\r\n  \"params\": {\r\n      \r\n    },\r\n \"request\":{\r\n           \"userName\":\"username\"       \r\n       }\r\n}"
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: '{{host}}/v1/user/forgotpassword'
        x-testDescription: Forgot password api.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /v1/user/profile/visibility:
    post:
      description: ''
      summary: '{{host}}/v1/user/profile/visibility'
      operationId: V1UserProfileVisibilityPost
      produces:
      - application/json
      parameters:
      - name: Body
        in: body
        required: true
        description: ''
        schema:
          $ref: '#/definitions/{{host}}~1v1~1user~1profile~1visibilityrequest'
      - name: Content-Type
        in: header
        required: true
        type: string
        description: ''
      - name: X-Consumer-ID
        in: header
        required: true
        type: string
        description: ''
      - name: ts
        in: header
        required: true
        type: string
        description: ''
      - name: X-msgid
        in: header
        required: true
        type: string
        description: ''
      - name: Authorization
        in: header
        required: true
        type: string
        description: ''
      - name: x-authenticated-user-token
        in: header
        required: true
        type: string
        description: ''
      responses:
        200:
          description: ''
      security:
      - auth: []
      x-unitTests:
      - request:
          method: POST
          uri: /v1/user/profile/visibility
          headers:
            Content-Type: application/json
            X-Consumer-ID: X-Consumer-ID
            ts: 2017-05-25 10:18:56:578+0530
            X-msgid: 8e27cbf5-e299-43b0-bca7-8347f7e5abcf
            Authorization: Bearer {{api-key}}
            x-authenticated-user-token: '{{user-token}}'
          body: "{\"request\":{\n  \"userId\":\"userid\",\n  \n  \"private\":[\"gender\",\"location\",\"address\"],\n  \"public\":[\"private field name which you want to make public\"]\n}}"
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: '{{host}}/v1/user/profile/visibility'
        x-testDescription: ''
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /v1/user/profile/read:
    post:
      description: ''
      summary: get User by Login Id
      operationId: V1UserProfileReadPost
      produces:
      - application/json
      parameters:
      - name: Body
        in: body
        required: true
        description: ''
        schema:
          $ref: '#/definitions/GetUserByLoginIdrequest'
      - name: Content-Type
        in: header
        required: true
        type: string
        description: ''
      - name: X-Consumer-ID
        in: header
        required: true
        type: string
        description: ''
      - name: ts
        in: header
        required: true
        type: string
        description: ''
      - name: X-msgid
        in: header
        required: true
        type: string
        description: ''
      - name: Authorization
        in: header
        required: true
        type: string
        description: ''
      - name: x-authenticated-user-token
        in: header
        required: true
        type: string
        description: ''
      responses:
        200:
          description: ''
      security:
      - auth: []
      x-unitTests:
      - request:
          method: POST
          uri: /v1/user/profile/read
          headers:
            Content-Type: application/json
            X-Consumer-ID: X-Consumer-ID
            ts: 2017-05-25 10:18:56:578+0530
            X-msgid: 8e27cbf5-e299-43b0-bca7-8347f7e5abcf
            Authorization: Bearer {{api-key}}
            x-authenticated-user-token: '{{user-token}}'
          body: "{\r\n \"params\": { },\r\n    \"request\":{   \r\n      \"loginId\":\"loginid\"\r\n    \r\n     \r\n     \r\n    }\r\n}"
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: get User by Login Id
        x-testDescription: ''
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /v1/user/badges/add:
    post:
      description: ''
      summary: add badges to user
      operationId: V1UserBadgesAddPost
      produces:
      - application/json
      parameters:
      - name: Body
        in: body
        required: true
        description: ''
        schema:
          $ref: '#/definitions/AddBadgesToUserrequest'
      - name: Content-Type
        in: header
        required: true
        type: string
        description: ''
      - name: X-Consumer-ID
        in: header
        required: true
        type: string
        description: ''
      - name: ts
        in: header
        required: true
        type: string
        description: ''
      - name: X-msgid
        in: header
        required: true
        type: string
        description: ''
      - name: Authorization
        in: header
        required: true
        type: string
        description: ''
      - name: x-authenticated-user-token
        in: header
        required: true
        type: string
        description: ''
      responses:
        200:
          description: ''
      security:
      - auth: []
      x-unitTests:
      - request:
          method: POST
          uri: /v1/user/badges/add
          headers:
            Content-Type: application/json
            X-Consumer-ID: X-Consumer-ID
            ts: 2017-05-25 10:18:56:578+0530
            X-msgid: 8e27cbf5-e299-43b0-bca7-8347f7e5abcf
            Authorization: Bearer {{api-key}}
            x-authenticated-user-token: '{{user-token}}'
          body: "{\r\n \"params\": { },\r\n    \"request\":{                 \r\n      \"badgeTypeId\": \"123343444\",\r\n      \"receiverId\" :\"userid\"\r\n      \r\n    }\r\n } "
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: add badges to user
        x-testDescription: ''
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /v1/role/read:
    get:
      description: ''
      summary: '{{host}}/data/v1/role/read'
      operationId: V1RoleReadGet
      produces:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: true
        type: string
        description: ''
      - name: X-Consumer-ID
        in: header
        required: true
        type: string
        description: ''
      - name: ts
        in: header
        required: true
        type: string
        description: ''
      - name: X-msgid
        in: header
        required: true
        type: string
        description: ''
      - name: Authorization
        in: header
        required: true
        type: string
        description: ''
      - name: x-authenticated-user-token
        in: header
        required: true
        type: string
        description: ''
      responses:
        200:
          description: ''
      security:
      - auth: []
      x-unitTests:
      - request:
          method: GET
          uri: /v1/role/read
          headers:
            Content-Type: application/json
            X-Consumer-ID: X-Consumer-ID
            ts: 2017-05-25 10:18:56:578+0530
            X-msgid: 8e27cbf5-e299-43b0-bca7-8347f7e5abcf
            Authorization: Bearer {{api-key}}
            x-authenticated-user-token: '{{user-token}}'
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: '{{host}}/data/v1/role/read'
        x-testDescription: ''
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /v1/user/read/{userId}:
    get:
      description: ''
      summary: '{{host}}/user/v1/read'
      operationId: V1UserRead46e44b53A5ca4905Adb5Aced136cf252Get
      produces:
      - application/json
      parameters:
      - name: Fields
        in: query
        required: true
        type: string
        description: ''
      - name: Content-Type
        in: header
        required: true
        type: string
        description: ''
      - name: X-Consumer-ID
        in: header
        required: true
        type: string
        description: ''
      - name: ts
        in: header
        required: true
        type: string
        description: ''
      - name: X-msgid
        in: header
        required: true
        type: string
        description: ''
      - name: Authorization
        in: header
        required: true
        type: string
        description: ''
      - name: x-authenticated-user-token
        in: header
        required: true
        type: string
        description: ''
      responses:
        200:
          description: ''
      security:
      - auth: []
      x-unitTests:
      - request:
          method: GET
          uri: /v1/user/read/{userId}?Fields=completeness,missingFields,topic
          headers:
            Content-Type: application/json
            X-Consumer-ID: X-Consumer-ID
            ts: 2017-05-25 10:18:56:578+0530
            X-msgid: 8e27cbf5-e299-43b0-bca7-8347f7e5abcf
            Authorization: Bearer {{api-key}}
            x-authenticated-user-token: '{{user-token}}'
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: '{{host}}/user/v1/read'
        x-testDescription: ''
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /v1/user/search:
    post:
      description: ''
      summary: search user
      operationId: V1UserSearchPost
      produces:
      - application/json
      parameters:
      - name: Body
        in: body
        required: true
        description: ''
        schema:
          $ref: '#/definitions/SearchUserrequest'
      - name: Content-Type
        in: header
        required: true
        type: string
        description: ''
      - name: X-Consumer-ID
        in: header
        required: true
        type: string
        description: ''
      - name: ts
        in: header
        required: true
        type: string
        description: ''
      - name: X-msgid
        in: header
        required: true
        type: string
        description: ''
      - name: Authorization
        in: header
        required: true
        type: string
        description: ''
      - name: x-authenticated-user-token
        in: header
        required: true
        type: string
        description: ''
      responses:
        200:
          description: ''
      security:
      - auth: []
      x-unitTests:
      - request:
          method: POST
          uri: /v1/user/search
          headers:
            Content-Type: application/json
            X-Consumer-ID: X-Consumer-ID
            ts: 2017-05-25 10:18:56:578+0530
            X-msgid: 8e27cbf5-e299-43b0-bca7-8347f7e5abcf
            Authorization: Bearer {{api-key}}
            x-authenticated-user-token: '{{user-token}}'
          body: "\n{\n\"id\":\"unique API ID\",\n\"ts\":\"2013/10/15 16:16:39\",\n  \"params\": {\n      \n  },\n \"request\": {\n        \"query\":\"a\",\n        \"filters\":{\n           \n        },\n        \"offset\": 0,\n        \"limit\": 5\n    }\n}"
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: search user
        x-testDescription: ''
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /v1/user/changepassword:
    post:
      description: Change password api.
      summary: '{{host}}/v1/user/changepassword'
      operationId: V1UserChangepasswordPost
      produces:
      - application/json
      parameters:
      - name: Body
        in: body
        required: true
        description: ''
        schema:
          $ref: '#/definitions/{{host}}~1v1~1user~1logoutrequest'
      - name: Content-Type
        in: header
        required: true
        type: string
        description: ''
      - name: X-Consumer-ID
        in: header
        required: true
        type: string
        description: ''
      - name: ts
        in: header
        required: true
        type: string
        description: ''
      - name: X-msgid
        in: header
        required: true
        type: string
        description: ''
      - name: Authorization
        in: header
        required: true
        type: string
        description: ''
      - name: x-authenticated-user-token
        in: header
        required: true
        type: string
        description: ''
      responses:
        200:
          description: ''
      security:
      - auth: []
      x-unitTests:
      - request:
          method: POST
          uri: /v1/user/changepassword
          headers:
            Content-Type: application/json
            X-Consumer-ID: X-Consumer-ID
            ts: 2017-05-25 10:18:56:578+0530
            X-msgid: 8e27cbf5-e299-43b0-bca7-8347f7e5abcf
            Authorization: Bearer {{api-key}}
            x-authenticated-user-token: '{{user-token}}'
          body: "{\r\n\r\n  \"params\": {\r\n       \r\n    },\r\n    \"request\":{ \r\n             \"password\":\"password1\",\r\n             \"newPassword\" :\"password\"\r\n            \r\n         }\r\n}"
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: '{{host}}/v1/user/changepassword'
        x-testDescription: Change password api.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /v1/user/update/logintime:
    patch:
      description: Add user current login time
      summary: '{{host}}/v1/user/updatelogin'
      operationId: V1UserUpdateLogintimePatch
      produces:
      - application/json
      parameters:
      - name: Body
        in: body
        required: true
        description: ''
        schema:
          $ref: '#/definitions/{{host}}~1v1~1user~1logoutrequest'
      - name: Content-Type
        in: header
        required: true
        type: string
        description: ''
      - name: X-Consumer-ID
        in: header
        required: true
        type: string
        description: ''
      - name: ts
        in: header
        required: true
        type: string
        description: ''
      - name: X-msgid
        in: header
        required: true
        type: string
        description: ''
      - name: Authorization
        in: header
        required: true
        type: string
        description: ''
      - name: x-authenticated-user-token
        in: header
        required: true
        type: string
        description: ''
      responses:
        200:
          description: ''
      security:
      - auth: []
      x-unitTests:
      - request:
          method: PATCH
          uri: /v1/user/update/logintime
          headers:
            Content-Type: application/json
            X-Consumer-ID: X-Consumer-ID
            ts: 2017-05-25 10:18:56:578+0530
            X-msgid: 8e27cbf5-e299-43b0-bca7-8347f7e5abcf
            Authorization: Bearer {{api-key}}
            x-authenticated-user-token: '{{user-token}}'
          body: "{\r\n \"params\": { },\r\n    \"request\":{   \r\n      \"userId\":\"userid\"\r\n    }\r\n}"
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: '{{host}}/v1/user/updatelogin'
        x-testDescription: Add user current login time
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /v1/user/create:
    post:
      description: create user
      summary: create user
      operationId: V1UserCreatePost
      produces:
      - application/json
      parameters:
      - name: Body
        in: body
        required: true
        description: ''
        schema:
          $ref: '#/definitions/CreateUserrequest'
      - name: Content-Type
        in: header
        required: true
        type: string
        description: ''
      - name: X-Consumer-ID
        in: header
        required: true
        type: string
        description: ''
      - name: ts
        in: header
        required: true
        type: string
        description: ''
      - name: X-msgid
        in: header
        required: true
        type: string
        description: ''
      - name: Authorization
        in: header
        required: true
        type: string
        description: ''
      responses:
        200:
          description: ''
      security:
      - auth: []
      x-unitTests:
      - request:
          method: POST
          uri: /v1/user/create
          headers:
            Content-Type: application/json
            X-Consumer-ID: X-Consumer-ID
            ts: 2017-05-25 10:18:56:578+0530
            X-msgid: 8e27cbf5-e299-43b0-bca7-8347f7e5abcf
            Authorization: Bearer {{api-key}}
          body: >-
            {

            "request":

            {

            "firstName":"manzarul","lastName":"haque",

            "password":"password",

            "phone":"9620759499","userName":"manhaque104"

            }

            }
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: create user
        x-testDescription: create user
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
definitions:
  '{{host}}/v1/user/logoutrequest':
    title: '{{host}}/v1/user/logoutRequest'
    example:
      params: {}
      request: {}
    type: object
    properties:
      params:
        description: ''
        example: {}
        type: object
      request:
        description: ''
        example: {}
        type: object
    required:
    - params
    - request
  UpdateUserInforequest:
    title: update user infoRequest
    example:
      id: 5ea900cf-3885-4ab5-b126-77b2074db562
      ts: 2017-09-19 12:22:09:874+0530
      params: {}
      request:
        profileSummary: Test to check for update
        userId: usrid
        lastname: manzarul
    type: object
    properties:
      id:
        description: ''
        example: 5ea900cf-3885-4ab5-b126-77b2074db562
        type: string
      ts:
        description: ''
        example: 2017-09-19 12:22:09:874+0530
        type: string
      params:
        description: ''
        example: {}
        type: object
      request:
        $ref: '#/definitions/Request'
        example:
          profileSummary: Test to check for update
          userId: userid
          lastname: manzarul
    required:
    - id
    - ts
    - params
    - request
  Request:
    title: Request
    example:
      profileSummary: Test to check for update
      userId: userid
      lastname: manzarul
    type: object
    properties:
      profileSummary:
        description: ''
        example: Test to check for update
        type: string
      userId:
        description: ''
        example: userid
        type: string
      lastname:
        description: ''
        example: manzarul
        type: string
    required:
    - profileSummary
    - userId
    - lastname
  '{{host}}/user/v1/role/assignrequest':
    title: '{{host}}/user/v1/role/assignRequest'
    example:
      request:
        userId: 3d45fbd8-b911-4cc5-b503-61215902d780
        organisationId: 0123653943740170242
        roles:
        - CONTENT_CREATION
        - PUBLIC
        - CONTENT_CREATOR
        - ANNOUNCEMENT_SENDER
    type: object
    properties:
      request:
        $ref: '#/definitions/Request4'
        example:
          userId: userid
          organisationId: 0123653943740170242
          roles:
          - CONTENT_CREATION
          - PUBLIC
          - CONTENT_CREATOR
          - ANNOUNCEMENT_SENDER
    required:
    - request
  Request4:
    title: Request4
    example:
      userId: userid
      organisationId: 0123653943740170242
      roles:
      - CONTENT_CREATION
      - PUBLIC
      - CONTENT_CREATOR
      - ANNOUNCEMENT_SENDER
    type: object
    properties:
      userId:
        description: ''
        example: userid
        type: string
      organisationId:
        description: ''
        example: 0123653943740170242
        type: string
      roles:
        description: ''
        example:
        - CONTENT_CREATION
        - PUBLIC
        - CONTENT_CREATOR
        - ANNOUNCEMENT_SENDER
        type: array
        items:
          type: string
    required:
    - userId
    - organisationId
    - roles
  Request6:
    title: Request6
    example:
      userName: manzarul1.haque@taren.com
      source: web
      password: password
    type: object
    properties:
      userName:
        description: ''
        example: manzarul1.haque@taren.com
        type: string
      source:
        description: ''
        example: web
        type: string
      password:
        description: ''
        example: password
        type: string
    required:
    - userName
    - source
    - password
  '{{host}}/v1/user/forgotpasswordrequest':
    title: '{{host}}/v1/user/forgotpasswordRequest'
    example:
      id: unique API ID
      ts: 2013/10/15 16:16:39
      params: {}
      request:
        userName: m.haque1149348
    type: object
    properties:
      id:
        description: ''
        example: unique API ID
        type: string
      ts:
        description: ''
        example: 2013/10/15 16:16:39
        type: string
      params:
        description: ''
        example: {}
        type: object
      request:
        $ref: '#/definitions/Request8'
        example:
          userName: m.haque1149348
    required:
    - id
    - ts
    - params
    - request
  Request8:
    title: Request8
    example:
      userName: m.haque1149348
    type: object
    properties:
      userName:
        description: ''
        example: m.haque1149348
        type: string
    required:
    - userName
  '{{host}}/v1/user/profile/visibilityrequest':
    title: '{{host}}/v1/user/profile/visibilityRequest'
    example:
      request:
        userId: userid
        private:
        - gender
        - location
        - address
        public:
        - private field name which you want to make public
    type: object
    properties:
      request:
        $ref: '#/definitions/Request10'
        example:
          userId: userid
          private:
          - gender
          - location
          - address
          public:
          - private field name which you want to make public
    required:
    - request
  Request10:
    title: Request10
    example:
      userId: userid
      private:
      - gender
      - location
      - address
      public:
      - private field name which you want to make public
    type: object
    properties:
      userId:
        description: ''
        example: userid
        type: string
      private:
        description: ''
        example:
        - gender
        - location
        - address
        type: array
        items:
          type: string
      public:
        description: ''
        example:
        - private field name which you want to make public
        type: array
        items:
          type: string
    required:
    - userId
    - private
    - public
  GetUserByLoginIdrequest:
    title: get User by Login IdRequest
    example:
      params: {}
      request:
        loginId: demopublic@ekstep
    type: object
    properties:
      params:
        description: ''
        example: {}
        type: object
      request:
        $ref: '#/definitions/Request12'
        example:
          loginId: demopublic@ekstep
    required:
    - params
    - request
  Request12:
    title: Request12
    example:
      loginId: demopublic@ekstep
    type: object
    properties:
      loginId:
        description: ''
        example: demopublic@ekstep
        type: string
    required:
    - loginId
  AddBadgesToUserrequest:
    title: add badges to userRequest
    example:
      params: {}
      request:
        badgeTypeId: 123343444
        receiverId: 5de6b1af-82c3-4f1b-afef-007db7390841
    type: object
    properties:
      params:
        description: ''
        example: {}
        type: object
      request:
        $ref: '#/definitions/Request14'
        example:
          badgeTypeId: 123343444
          receiverId: userid
    required:
    - params
    - request
  Request14:
    title: Request14
    example:
      badgeTypeId: 123343444
      receiverId: userid
    type: object
    properties:
      badgeTypeId:
        description: ''
        example: 123343444
        type: string
      receiverId:
        description: ''
        example: userid
        type: string
    required:
    - badgeTypeId
    - receiverId
  SearchUserrequest:
    title: search userRequest
    example:
      id: unique API ID
      ts: 2013/10/15 16:16:39
      params: {}
      request:
        query: a
        filters: {}
        offset: 0
        limit: 5
    type: object
    properties:
      id:
        description: ''
        example: unique API ID
        type: string
      ts:
        description: ''
        example: 2013/10/15 16:16:39
        type: string
      params:
        description: ''
        example: {}
        type: object
      request:
        $ref: '#/definitions/Request16'
        example:
          query: a
          filters: {}
          offset: 0
          limit: 5
    required:
    - id
    - ts
    - params
    - request
  Request16:
    title: Request16
    example:
      query: a
      filters: {}
      offset: 0
      limit: 5
    type: object
    properties:
      query:
        description: ''
        example: a
        type: string
      filters:
        description: ''
        example: {}
        type: object
      offset:
        description: ''
        example: 0
        type: integer
        format: int32
      limit:
        description: ''
        example: 5
        type: integer
        format: int32
    required:
    - query
    - filters
    - offset
    - limit
  Request18:
    title: Request18
    example:
      password: password1
      newPassword: password
    type: object
    properties:
      password:
        description: ''
        example: password1
        type: string
      newPassword:
        description: ''
        example: password
        type: string
    required:
    - password
    - newPassword
  Request20:
    title: Request20
    example:
      userId: userid
    type: object
    properties:
      userId:
        description: ''
        example: userid
        type: string
    required:
    - userId
  CreateUserrequest:
    title: create userRequest
    example:
      request:
        firstName: manzarul
        lastName: haque
        password: password
        phone: 9620759499
        userName: manhaque104
    type: object
    properties:
      request:
        $ref: '#/definitions/Request22'
        example:
          firstName: manzarul
          lastName: haque
          password: password
          phone: 9620759499
          userName: manhaque104
    required:
    - request
  Request22:
    title: Request22
    example:
      firstName: manzarul
      lastName: haque
      password: password
      phone: 9620759499
      userName: manhaque104
    type: object
    properties:
      firstName:
        description: ''
        example: manzarul
        type: string
      lastName:
        description: ''
        example: haque
        type: string
      password:
        description: ''
        example: password
        type: string
      phone:
        description: ''
        example: 9620759499
        type: string
      userName:
        description: ''
        example: manhaque104
        type: string
    required:
    - firstName
    - lastName
    - password
    - phone
    - userName
